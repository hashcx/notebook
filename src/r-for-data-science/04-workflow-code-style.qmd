---
title: "Workflow: Code Style"
number-sections: true
---

## Introduction

This page covers code style concepts when working with R. I took note for those that were new to me or found useful to remind myself with.

::: callout-note
### Code Style & Punctuation

Code style is like punctuation, when used correctly, itmakecodereadeasily.
:::

## Clear Workspace

Always start by clearing the workspace. This ensure objects created in other files are not used used here.

```{r}
#| include: true
#| results: 'hide'

rm(list = ls())
```

## Packages {#sec-packages}

### List

List all the packages that will be used in this script.

```{r List of Used Packages}
#| include: true
#| echo: true
#| error: true

packages <- c("styler")
```

### Install Missing

Any missing package will be installed automatically. This ensure smoother execution when run by others.

```{r Install Missing Packages}
#| include: true
#| echo: true
#| error: true

# Do NOT modify
install.packages(setdiff(packages, rownames(installed.packages())))
```

### Load

Load all packages

```{r Load Packages}
#| include: true
#| echo: false
#| error: true

# Do NOT modify
lapply(packages, require, character.only = TRUE)
```

## Styling Overview

### Consistency

Although there are styling guidelines (see below for example) that one can follow, it is important that a programmer pick one and stick with it to make easy for other including future self to read your work.

### Guidelines

There is not official styling guideline for R. However, there are different styling guidelines that one can adopt, below are some of those found by search R styling guidelines ([html](https://www.google.com/search?q=r+styling+guidlines&oq=r+styling+guidlines)):

-   tidyverse Style Guide ([html](https://style.tidyverse.org/)) by Hadley Wickham. **This is the adopted guidelines in these notes.**
-   R Style Guide ([html](https://google.github.io/styleguide/Rguide.html)) by Google
-   R Coding Conventions ([html](https://docs.google.com/document/d/1esDVxyWvH8AsX-VJa-8oqWaHLs4stGlIbk8kLc5VlII/preview)) by Henrik Bengtsson, Assoc Professor, Dept of Statistics, University of California, Berkeley
-   Coding Style ([html](https://contributions.bioconductor.org/r-code.html#r-code)) by Bioconductor project ([website](https://bioconductor.org/))
-   R Style Guide ([html](https://jef.works/R-style-guide/)) by Jean Fan ([GitHub](https://github.com/JEFworks)), Assistant Professor, Center for Computational Biology, Department of Biomedical Engineering, Johns Hopkins University

### Automatic

There are package that can be used to automatically style existing code. Below are some of those:

-   `styler` package ([website](https://styler.r-lib.org/)) by Lorenz Walthert ([website](https://lorenzwalthert.com/)). After installing the package, launch RStudio's command palette using the keyboard shortcut `Ctrl+Shift+P`, type `styler`, and select from the available commands

## Styling Specifics

### Names

-   Use meaningful names
-   snake_case is used to separate_multi_word_variables
-   variables with certain theme should start with the same common word/letter to make use of the auto-complete functionality

### Spaces

-   Except `^`, put spaces on both sides of mathematical operators
-   Put spaces on both sides of the assignment operator, `<-`

```{r}
#| eval: false

# Strive for
z <- (a + b)^2 / d

# Avoid
z<-( a + b ) ^ 2/d
```

-   Don't put spaces inside or outside parentheses for regular function calls
-   Always put a space after a comma

```{r}
#| eval: false

# Strive for
mean(x, na.rm = TRUE)

# Avoid
mean (x ,na.rm=TRUE)
```

-   It is okay to use extra space so align things.

```{r}
#| eval: false

flights |> 
  mutate(
    speed      = distance / air_time,
    dep_hour   = dep_time %/% 100,
    dep_minute = dep_time %%  100
  )
```

### Pipes `|>`

The roles for pipes are nicely summarized in [R4DS](https://r4ds.hadley.nz/workflow-style#sec-pipes). Most of them are copied below.

-   Put a space before it
-   It should typically the last thing on a line. This make it easy to
    -   add new steps
    -   rearrange existing steps
    -   modify elements within a step
    -   quickly skip the verbs on the left-hand side
-   After the first step of the pipeline, indent each line by two spaces

```{r}
#| eval: false

# Strive for 
flights |>  
  filter(!is.na(arr_delay), !is.na(tailnum)) |> 
  count(dest)

# Avoid
flights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)
```

-   If piping to a function without named arguments and its arguments fit on one line,
    -   put all of them on one line.
-   If piping to a function with named arguments OR the function has not named arguments but the arguments do not fit on line,
    -   put each argument on new line indented by two spaces
    -   make sure the `)` is on its own line and un-indented to match the horizontal position of the function name

```{r}
#| eval: false

# Strive for
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Avoid
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())

# Avoid
flights|>
  group_by(tailnum) |> 
  summarize(
             delay = mean(arr_delay, na.rm = TRUE), 
             n = n()
           )

# Avoid
flights|>
  group_by(tailnum) |> 
  summarize(
  delay = mean(arr_delay, na.rm = TRUE), 
  n = n()
  )
```

::: callout-note
#### Long Pipeline

Break long pipelines (tasks) to meaningful pipelines (sub-tasks) and save the intermediate steps. This will make the code more readable and easy to check and debug.
:::

### `ggplot2`

The same rules from pipe can be applied to `ggplot2`.

```{r}
#| eval: false

flights |> 
  group_by(dest) |> 
  summarize(
    distance = mean(distance),
    speed = mean(distance / air_time, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = distance, y = speed)) +
  geom_smooth(
    method = "loess",
    span = 0.5,
    se = FALSE, 
    color = "white", 
    linewidth = 4
  ) +
  geom_point()
```

### Sectioning Comments

When writing long scripts, it is advisable to break the code into sections and using *sectioning* comments to label them. The RStudio keyboard shortcut to create such comment is `Cnrl+Shift+R`.

```{r}
#| eval: false

# Load data --------------------------------------

# Plot data --------------------------------------
```
