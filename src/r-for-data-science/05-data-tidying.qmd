---
title: "Data Tidying"
number-sections: true
---

## Clear Workspace, DON'T EDIT {-}

Always start by clearing the workspace. This ensure objects created in other files are not used used here.

```{r}
#| include: true
#| results: 'hide'

rm(list = ls())
```

## List Used Packages, EDIT {-}

List all the packages that will be used in chunk below.

```{r}
#| include: true
#| echo: true
#| error: true

packages <- c("styler", "dplyr", "tidyr")
```


## Load Packages, DON'T EDIT {#sec-packages -}

### Install Missing {-}

Any missing package will be installed automatically. This ensure smoother execution when run by others.

```{r Install Missing Packages}
#| include: true
#| echo: true
#| error: true

# Do NOT modify
install.packages(setdiff(packages, rownames(installed.packages())))
```

### Load {-}

Load all packages

```{r Load Packages}
#| include: true
#| echo: true
#| error: true

# Do NOT modify
lapply(packages, require, character.only = TRUE)
```

## Introduction

This page explains how use the `tidyr` package to put data in tidy form where:

- each row represents an observation
- each column represents a variable
- each cell contain a single value

Putting data in tidy form will make it easy to process using tidyverse packages.

::: callout-note

### Data Trasformation Bottom-Line

Tidying is 1-to-1 process--the data takes different form but it can be put back into its original form which mean that no values are lost.

:::



## Lengthening Data, `pivot_longer`

::: callout-note

### `pivot_longer' Idea

When pivoting longer, the number of the rows in the dataset increases while the number of columns decreases.

:::

### One Variable in Column Headers

#### Toy Dataset

The following toy dataset will be used to illustrate the concepts in this section.  The book used `tidyr::billboard` dataset.

```{r}
ds <- tribble(
  ~id, ~A, ~B_1, ~B_2,
  "A", 1, 10.1, 10.2,
  "B", 2, 20.1, NA,
  "C", 3, NA, 30.2
)

ds
```


#### Lengthen

> I want the values in all the columns that start with `B_` to be placed into a (single) column named `value`.  To distinguish which value belong to which column, create a new column called `B_type` for this purpuse.

::: callout-note

##### Dimensions of New Dataset

Assume the dimensions of the old dataset are:

- number of cols: co
- number of rows: ro

The dimensions of the new dataset are:

- number of cols: co - number of combined columns - 1
- number of rows: ro * (number of combined columns - 1)


:::

```{r}
ds_lengthen <- ds |> 
  pivot_longer(
    cols = starts_with("B_"),
    names_to = "B_type",
    values_to = "value"
  )

ds_lengthen
```

#### Remove NA

Use the argument `values_drop_na = TRUE`

```{r}
ds_lengthen <- ds |> 
  pivot_longer(
    cols = starts_with("B_"),
    names_to = "B_type",
    values_to = "value",
    values_drop_na = TRUE
  )

ds_lengthen
```


#### Fix Cell Values

Use the `readr::parse_number()` function to extract the first number from var2 variable and ignore all other text.

```{r}
ds_lengthen <- ds |> 
  pivot_longer(
    cols = starts_with("B_"),
    names_to = "B_type",
    values_to = "value",
    values_drop_na = TRUE
  ) |> 
  mutate(
    B_type = readr::parse_number(B_type)
  )

ds_lengthen
```


### Multiple Variables in Column Headers

#### Toy Dataset

The following toy dataset will be used to illustrate the concepts in this section.  The book used `tidyr::who2` dataset. 

```{r}
ds2 <- tribble(
  ~id, ~A, ~B1_C1, ~B1_C2, ~B2_C1, ~B2_C2,
  "A", 1, 10.11, 10.12, 10.21, 10.22,
  "B", 2, 20.11, 20.12, NA, 20.22,
  "C", 3, 30.11, NA, 30.21, 30.22
)

ds2
```

#### Lengthening w/o Seperating Variables

```{r}
ds_lengthen <- ds2 |> 
  pivot_longer(
    cols = starts_with("B"),
    names_to = "B_C",
    values_to = "value"
  )

ds_lengthen
```

#### Lengthening w/ Seperating Variables

```{r}
ds_lengthen <- ds2 |> 
  pivot_longer(
    cols = !(id:A),
    names_sep = "_",
    names_to = c("B", "C"),
    values_to = "value"
  )

ds_lengthen
```

#### Dropping NA

```{r}
ds_lengthen <- ds2 |> 
  pivot_longer(
    cols = !(id:A),
    names_sep = "_",
    names_to = c("B", "C"),
    values_to = "value",
    values_drop_na = TRUE
  )

ds_lengthen
```

### Data and Variable Names in Colmnn Headers

#### Toy Dataset

The following toy dataset will be used to illustrate the concepts in this section.  The book used `tidyr::household` dataset. 


```{r}
ds3 <- tribble(
  ~id, ~child1_name, ~child1_age, ~child2_name, ~child2_age,
  "A", "A1", 11, "A2", 12,
  "B", "B1", 21, NA, NA,
  "C", NA, NA, "C2", 32
)

ds3
```

#### Lengthening w/o Removing NA

```{r}
ds_lengthen <- ds3 |> 
  pivot_longer(
    cols = starts_with("child"),
    names_sep = "_",
    names_to = c("child", ".value")
  )

ds_lengthen
```

#### Lengthening w Removing NA

```{r}
ds_lengthen <- ds3 |> 
  pivot_longer(
    cols = starts_with("child"),
    names_sep = "_",
    names_to = c("child", ".value"),
    values_drop_na = TRUE
  )

ds_lengthen
```


#### Fixing Cell Values

```{r}
ds_lengthen <- ds3 |> 
  pivot_longer(
    cols = starts_with("child"),
    names_sep = "_",
    names_to = c("child", ".value"),
    values_drop_na = TRUE
  ) |> 
  mutate(
    child = readr::parse_number(child)
  )

ds_lengthen
```


## Widening Data, `pivot-wider`

::: callout-note

### `pivot_wider' Idea

When pivoting wider, the number of the columns in the dataset increases while the number of rows decreases.

:::


### No Missing Values

#### Toy Dataset

Notice that each unique value in the `id` column has a single value for each of the unique values in the `M` column.

```{r}
ds <- tribble(
  ~id, ~M, ~V,
  "A", "M1", 10,
  "A", "M2", 11,
  "B", "M1", 20,
  "B", "M2", 21,
  "C", "M1", 30,
  "C", "M2", 31
)

ds
```

#### Widenning

```{r}
ds_widen <- ds |> 
  pivot_wider(
    names_from = M,
    values_from = V
  )

ds_widen
```



### Missing Values

#### Toy Dataset

Notice that NOT each unique value in the `id` column has a single value for each of the unique values in the `M` column--`B` does not have value for the `M2` value.

```{r}
ds <- tribble(
  ~id, ~M, ~V,
  "A", "M1", 10,
  "A", "M2", 11,
  "B", "M1", 20,
  "C", "M1", 30,
  "C", "M2", 31
)

ds
```

#### Widenning

Notice that `B` observation will be assigned `NA` as its value in the `M2` column.

```{r}
ds_widen <- ds |> 
  pivot_wider(
    names_from = M,
    values_from = V
  )

ds_widen
```

### Duplicate Values

#### Toy Dataset

Notice that NOT each unique value in the `id` column has a single value for each of the unique values in the `M` column--B has multiple value for `M2`.

```{r}
ds <- tribble(
  ~id, ~M, ~V,
  "A", "M1", 10,
  "A", "M2", 11,
  "B", "M1", 20,
  "B", "M2", 21,
  "B", "M2", 22,
  "C", "M1", 30,
  "C", "M2", 31
)

ds
```

#### Widenning

Notice that the generated values are `list-cols`--see the warning message for details.

```{r}
ds_widen <- ds |> 
  pivot_wider(
    names_from = M,
    values_from = V
  )

ds_widen
```

## Reference

- Wickham, H. . (2014). Tidy Data. Journal of Statistical Software, 59(10), 1â€“23. https://doi.org/10.18637/jss.v059.i10 ([webpage](https://www.jstatsoft.org/article/view/v059i10))
    - details the history and underlying theory behind tidy data

