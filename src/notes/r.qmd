---
title: "R"
eval: true
---


```{r Clean workspace}
#| include: false

rm(list = ls())
```

```{r List all used packages}
#| include: false

packages <- c("downlit", "xml2", "here", "tidyverse", "janitor", "cols4all", "shiny", "shinyjs", "kableExtra", "colorblindcheck", "plotly")
```


```{r Install missing packages}
#| include: false

install.packages(setdiff(packages, rownames(installed.packages())))
```

```{r Load packages}
#| include: false

lapply(packages, require, character.only = TRUE)
```

## R Packages

An R package usually includes:

  - reusable functions
  - documentation describing how to use the function
  - sample data

## Dataset in Packages

To list datasets in all the available packages, use the following command:

```r
data(package = .packages(all.available = TRUE))
```

## Primitive Data Types

The primitive (also known as singleton/simple) data types in R are:

-   character
-   numeric
-   logical
-   raw
-   imaginary numbers

To know the datatype of an object, run the command:

```r
class(x) # give the data type of x
```

To know the type of the variables of each variable.

```r
x |> 
  slice(0) |> 
  glimpse()
```

### Mixing Data Types

-   character + numeric --\> character
-   numeric + logical --\> numeric
-   numeric + character + logical --\> character

## Compound Data Types

The compound (also know as collection/sttructure) data types in R are:

-   **vector**: hold single type of data

::: callout-note

### Creating Vector

The `c()` function (**c**ombine multiple elements) can be used to create vectors in R.

```
x <- c(1, 2, 3, 4)
```

:::

-   **matrix**: 2D vector
-   **array**: nD vector
-   **list**: generic vector, can hold mixed type of data, eg, one element can be a character, another can be a list of integers, and the third could be a logical
-   **data frame**: table where columns represent vectors
-   **tibbles**: data frames, but slightly tweaked to work better with `tidyverse`--when printing tibbles, only the first few columns that fit into the screen will be shown

::: callout-note

### Printing tibble All Columns

To force the `print()` function to print all the columns of a `tibble`, set the `width` parameter to `Inf` as follows:

```r
print(ds, width = Inf)
```

:::

To construct small tibble by hand, use the `tribble` function as follows:

```r
df <- tribble(
  ~var1, ~var2, ~var3
  "A", 1, TRUE,
  "B", 2, FALSE,
  "C", 3, TRUE
)
```


-   **factor**

```{r}
#| label: fig-datastructure
#| echo: false
#| fig-cap: Common data structures in R ( taken from [Grolemund, 2014](https://jjallaire.github.io/hopr/objects.html))
#| out-width: NULL

knitr::include_graphics(here("images", "datastructure.png"))
```


To know the data structure and length of the object, run the command:

```r
str(x) # give the structure type of x
length(x) # length of structure
```



## Basics Operations

Assignment

```{r}
x <- 3 # assign 3 to x (x gets 3)
(x <- 3) # assign 3 to x (x gets 3) & print the result to console
```

Getting Help 

```r
args(round) # print the argument list of function
?round # show documentation of function in Help window
```

Dealing with Structure

```{r}
# concatenate set of values to create vector
weight_g <- c(50, 60, 3, 9)
animals <- c("dog", "bat", "cat")

# utilizing logical values to pull specific values
weight_g[weight_g < 10 & weight_g > 60 | weight_g == 50]

# pull dog & cat records
animals[animals %in% c("dog", "cat")]
animals[animals == "dog" | animals == "cat"]
```

Statistics

```{r}
# signaling missing data using NA
heights <- c(2, 3, NA, 4)

# get mean while ignoring missing data
mean(heights, na.rm = TRUE)

# how to use mean
# ?mean
```

## Initial Steps

### File Paths

The `here` package makes it easy to point to files starting from the project main directory.

```r
library("here", "janitor")
```

### Store Locally

Loading file from repository and saving it locally on disk. It is always a good idea to structure the workspace--for more information, see [Best Practices for Scientific Computing paper](http://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1001745).

```{r}
file_name <- "portal_data_joined.csv"
file_path <- here("data", file_name)

if (!file.exists(file_path)) {
  download.file(
    url = "https://ndownloader.figshare.com/files/2292169",
    destfile = file_path
  )
}
```

### Load Locally

```{r}
surveys <- read.csv(file_path)

glimpse(surveys)
```

### Clean Names

```{r}
surveys <- surveys |> 
  janitor::clean_names()
```


### Inspecting Data

```{r}
class(surveys) # data type
```

```{r}
str(surveys) # structure
```

```{r}
surveys |> 
  slice(0) |> 
  glimpse()
```

```{r}
dim(surveys) # dimensions
nrow(surveys)
ncol(surveys)
```

```{r}
summary(surveys)
```

Print top and bottom obervations

```{r}
head(surveys)
tail(surveys)
```

Retrieve specific element/row/column

```{r}
surveys[1, 1] # element[1,1]
surveys[1, ] # row 1
head(surveys[, 1]) # column 1
head(surveys$sex) # column by name
```

### Dealing with Factor (Categorical) Columns

R convert columns that contain characters to factors by default. Factors are treated as integer vectors. By default, R sorts levels in alphabetical order.

```{r}
levels(surveys$sex)
nlevels(surveys$sex)
```

Reorder factors (to get better plots)

```{r}
surveys$sex_ordered <- factor(surveys$sex, level = c("F", "M", ""))
str(surveys$sex_ordered)
levels(surveys$sex_ordered)
nlevels(surveys$sex_ordered)
```

### Basic Plotting

Histogram

```{r}
# plot(surveys$sex)  # not possible
plot(surveys$sex_ordered)
```

Enhance the plot

```{r}
levels(surveys$sex_ordered)[1] <- "Female"
levels(surveys$sex_ordered)[2] <- "Male"
plot(surveys$sex_ordered)
```

## Data Manipulation

-   `tdlyr`
    -   makes manipulation of data easier
    -   built to work with data frames directly
    -   can directly work with data stored in an external database which give the advantage of only bringing what we need to the memory to work on without having to bring the whole database
-   `tidyr`
    -   allows to swiftly convert b/w different data formats for plotting & analysis in order to accommodate the different requirements by different functions
        -   sometime we want one row per measurement
        -   other times we want the data aggregated like when plotting

Before using `tdlyr` and `tidyr`:

-   Install `tidyverse` package: umbrella-package that install several packages (tidyr, dplyr, ggplot2 tibble, magrittr, etc.)
-   Load the package each session

Load packages

```{r}
#| eval: false

library("tidyverse")
```

Load & inspect data

```{r}
# notice the '_' instead of '.' of basic R
surveys <- read_csv(here("data", "portal_data_joined.csv"))

str(surveys) # structure: tbl_df (tibble)
# view(surveys)	# preview in the viewer window, avoid when rendering
```

### Selection

Select certain columns

```{r}
select(surveys, plot_id, species_id, weight)
```

Select all columns except ...

```{r}
select(surveys, -sex)
```

Select rows based on criteria

```{r}
filter(surveys, year == 1995)
```

### Piping

Sending the results of one function to another

```{r}
# in multiple steps
survey_less5 <- filter(surveys, weight < 5)
survey_sml <- select(survey_less5, species_id, sex, weight)

# in one long step
survey_sml <- select(filter(surveys, weight < 5), species_id, sex, weight)

# using pipe %>% of magritter package.  Use Ctrl + Shift + M to add
survey_sml <- surveys %>%
  filter(weight < 5) %>%
  select(species_id, sex, weight)
```

### Summary

Summary of groups (1+ columns)

one factor

```{r}
surveys %>%
  group_by(sex) %>%
  summarise(mean_weight = mean(weight, na.rm = TRUE))
```

two factors

```{r}
surveys %>%
  group_by(sex, species) %>%
  summarise(mean_weight = mean(weight, na.rm = TRUE))

surveys %>%
  group_by(species, sex) %>%
  summarise(mean_weight = mean(weight, na.rm = TRUE))
```

to avoid using `na.rm = FALSE` each statistics

```{r}
surveys %>%
  filter(!is.na(weight)) %>%
  group_by(species, sex) %>%
  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n())
```

arrange by mean weight

```{r}
surveys %>%
  filter(!is.na(weight)) %>%
  group_by(species, sex) %>%
  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %>%
  arrange(mean_weight)
```

in descending order

```{r}
surveys %>%
  filter(!is.na(weight)) %>%
  group_by(species, sex) %>%
  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %>%
  arrange(desc(mean_weight))
```

by count

```{r}
surveys %>%
  filter(!is.na(weight)) %>%
  group_by(species, sex) %>%
  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %>%
  arrange(sd_count)
```

### Count

Count of a categorical column

```{r}
surveys %>%
  count(sex)
```

### Reshaping

Using gather & spreed

prepare the needed data first

```{r}
surveys_gw <- surveys %>%
  filter(!is.na(weight)) %>%
  group_by(genus, plot_id) %>%
  summarize(mean_weight = mean(weight))
```

creating a 2D table where each dimension represent a category the cell will represent a statistics

```{r}
surveys_spread <- surveys_gw %>%
  spread(key = genus, value = mean_weight)
str(surveys_spread)
head(surveys_spread)
```

bring spread back

```{r}
surveys_gw <- surveys_spread %>%
  gather(key = genus, value = mean_weight, -plot_id)
str(surveys_gw)
head(surveys_gw)
```

### Filtering

Remove missing data

```{r}
survey_complete <- surveys %>%
  filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))
```

Filter those that has sample greater than 50

```{r}
species_counts <- survey_complete %>%
  count(species_id) %>%
  filter(n >= 50)
```

filter only those in the indicated category

```{r}
surveys_com <- surveys %>%
  filter(species_id %in% c("albigula", "eremicus"))
```

### Saving to disk

```{r}
#| eval: false

write_cvs()
```

## Visualization

-   Help in making complex plots from data frames in simple steps
-   ggplot graphics are built step by step by adding new elements; this makes it flexible as well as customization
- To get list of ggplot2 geometric objects: `help.search("gemo_", package="ggplot2")`
- To know the aesthetic specification each geom_ can take: `vignette("ggplot2-specs")`

Step 1: Bind the plot to specific data frame

```{r}
surveys_plot <- ggplot(
  data = survey_complete,
  mapping = aes(x = weight, y = hindfoot_length)
)
surveys_plot

# Color for each group
surveys_plot <- ggplot(
  data = survey_complete,
  mapping = aes(x = weight, y = hindfoot_length),
  color = species_id
)
surveys_plot
```

Step 2: Select the type of the plot

-   scatter plot, dot plots, etc. \> geom_point()
-   boxplots \> geom_boxplot()
-   trend lines, time series, etc. \> geom_line()

### Scatter plot

```{r}
surveys_plot + geom_point()

# add transparency
surveys_plot + geom_point(alpha = 0.1)

# color if not used in binding
surveys_plot + geom_point(alpha = 0.1, color = "black")

# add color if not used in binding
surveys_plot + geom_point(alpha = 0.1, aes(color = species_id))

# make the color blend by introducing small random variation in points locations
# used when having small data sets
surveys_plot + geom_jitter(alpha = 0.1)
```

### Boxplot

```{r}
surveys_plot <- ggplot(
  data = survey_complete,
  mapping = aes(x = species_id, y = weight)
)

surveys_plot + geom_boxplot()

# show data
surveys_plot + geom_boxplot(alpha = 0.5) +
  geom_jitter(alpha = 0.1, color = "tomato")

# bring boxplot layer in front
surveys_plot + geom_jitter(alpha = 0.1, color = "tomato") +
  geom_boxplot(alpha = 0.7)
```

### Time series data

```{r}
# create appropriate dataset
yearly_count <- survey_complete %>%
  count(year, species_id)

surveys_plot <- ggplot(
  data = yearly_count,
  mapping = aes(x = year, y = n)
)

surveys_plot + geom_line()

# make it more meaningful by breaking it by category
surveys_plot + geom_line(aes(group = species_id))

# make it more colorful
surveys_plot + geom_line(aes(color = species_id))

# split into multiple plots
surveys_plot + geom_line() + facet_wrap(~species_id)

# split the line in each plot by sex
yearly_sex_counts <- survey_complete %>%
  count(year, species_id, sex)

surveys_plot <- ggplot(
  data = yearly_sex_counts,
  mapping = aes(x = year, y = n)
)

surveys_plot + geom_line(aes(color = sex)) +
  facet_wrap(~species_id)

# remove background
surveys_plot + geom_line(aes(color = sex)) +
  facet_wrap(~species_id) +
  theme_bw() +
  theme(panel.grid = element_blank())
```

## Colors

### cols4all package

[cols4all package](https://cols4all.github.io/cols4all-R/) by [Martijn Tennekes](https://10mapz.com/) helps select color palettes.

The main tool in the package is a dashboard that can be started using the following line:

```{r}
c4a_gui()
```


## References

-   OU Software Carpentry Workshop (check other workshops [here](https://libraries.ou.edu/content/software-and-data-carpentry))
    -   [Main Tutorial](https://oulib-swc.github.io/2019-05-15-ou-swc/)
    -   [Data Carpentry with R](https://datacarpentry.org/R-ecology-lesson/index.html)
    -   [Software Carpentry with R](https://swcarpentry.github.io/r-novice-gapminder/)
    -   [Etherpad](https://pad.carpentries.org/2019-05-15-ou-swc)
    -   [Google Doc](https://docs.google.com/document/d/1aJq_X1uhaNkUj7qdZEzOcpc2Pky7eZPy76yqs0UkfrQ/edit)
-   [Intro to ggplot](https://rawcdn.githack.com/allisonhorst/data-vis/fc107e063f50ef8695b0a75ed73d74720aca2c65/data_vis_np.html) by [Allison Horst](https://github.com/allisonhorst)
-   [R for Data Science book by Garrett Grolemund and Hadley Wickham](https://r4ds.had.co.nz/)
-   [Best Practices for Scientific Computing paper](http://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1001745)
