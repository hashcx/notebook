[
  {
    "objectID": "src/about.html",
    "href": "src/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Index",
      "About"
    ]
  },
  {
    "objectID": "src/index.html",
    "href": "src/index.html",
    "title": "Index",
    "section": "",
    "text": "This Quarto website hosts my notes for some of the programming/scripting languages that I have learned.",
    "crumbs": [
      "Index"
    ]
  },
  {
    "objectID": "src/quarto.html",
    "href": "src/quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "VSCode/RStudio -&gt; Render button\nTerminal -&gt; quarto preview\nTerminal -&gt; quarto preview help",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/quarto.html#render-review",
    "href": "src/quarto.html#render-review",
    "title": "Quarto",
    "section": "",
    "text": "VSCode/RStudio -&gt; Render button\nTerminal -&gt; quarto preview\nTerminal -&gt; quarto preview help",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/quarto.html#render-wo-review",
    "href": "src/quarto.html#render-wo-review",
    "title": "Quarto",
    "section": "Render w/o Review",
    "text": "Render w/o Review\n\nTerminal -&gt; quarto render\nTerminal -&gt; quarto render help",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/quarto.html#references",
    "href": "src/quarto.html#references",
    "title": "Quarto",
    "section": "References",
    "text": "References\n\nQuarto Reference",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/r-basics.html",
    "href": "src/r-basics.html",
    "title": "R Basics",
    "section": "",
    "text": "Sources\nGeneral Information\nData Types\nData Structure\nBasics\nFiles, Data Frames, & Plots\nData Manipulation using dplyr and tidyr\nVisualization Using ggplot2",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#table-of-content",
    "href": "src/r-basics.html#table-of-content",
    "title": "R Basics",
    "section": "",
    "text": "Sources\nGeneral Information\nData Types\nData Structure\nBasics\nFiles, Data Frames, & Plots\nData Manipulation using dplyr and tidyr\nVisualization Using ggplot2",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#sources",
    "href": "src/r-basics.html#sources",
    "title": "R Basics",
    "section": "Sources",
    "text": "Sources\n\nOU Software Carpentry Workshop (check other workshops here)\n\nMain Tutorial\nData Carpentry with R\nSoftware Carpentry with R\nEtherpad\nGoogle Doc\n\nIntro to ggplot by Allison Horst\nR for Data Science book by Garrett Grolemund and Hadley Wickham",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#general-information",
    "href": "src/r-basics.html#general-information",
    "title": "R Basics",
    "section": "General Information",
    "text": "General Information\n\nCreating a project instead of a file comes with the advantage of saving the workspace settings\nCtrl+Enter to run the line of code",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#data-types",
    "href": "src/r-basics.html#data-types",
    "title": "R Basics",
    "section": "Data Types",
    "text": "Data Types\n\ncharacter\nnumeric\nlogical\nraw\nimaginary numbers\n\n\nclass(x)    # give the data type of x\n\n\nMixing Data Types\n\ncharacter + numeric = character\nnumeric + logical = numeric\nnumeric + character + logical = character",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#data-structure",
    "href": "src/r-basics.html#data-structure",
    "title": "R Basics",
    "section": "Data Structure",
    "text": "Data Structure\n\nvector: hold single type of data\nmatrix: 2D vector\nlist: generic vector, each of its element can be anything (character list of lists)\ndata frame: table where columns represent vectors\ntibbles: data frames, but slightly tweaked to work better in the tidyverse\nfactor\n\n\nstr(x)      # give the structure type of x\nlength(x)   # length of structure",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#basics",
    "href": "src/r-basics.html#basics",
    "title": "R Basics",
    "section": "Basics",
    "text": "Basics\nAssignment\n\nx &lt;- 3      # assing 3 to x\n(x &lt;- 3)    # assing 3 to x & print the result to console\n\nGetting Help\n\nargs(round) # bring the interface\n?round      # bring the help file\n\nDealing with Structure\n\n# concatenate set of values to create vector\nweight_g &lt;- c(50, 60, 3, 9)\n\n# utalizing logical values to pull specific values\nweight_g[weight_g &lt; 10 & weight_g &gt; 60 | weight_g == 50]\n\n# pull dog & cat records\nanimals[animals %in% c(\"dog\", \"cat\")]\nanimals[animals == \"dog\" | animals == \"cat\"]\n\nStatistics\n\n# signaling missing daa using NA\nheights &lt;- c(2, 3, NA, 4)\n\n# get mean while ignoring missing data\nmean(heights, na.rm = TRUE)\n\n# how to use mean\n?mean",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#files-data-frames-plots",
    "href": "src/r-basics.html#files-data-frames-plots",
    "title": "R Basics",
    "section": "Files, Data Frames, & Plots",
    "text": "Files, Data Frames, & Plots\nLoading file from repository and saving it locally on disk. It is always a good idea to structure your workspace. See Best Practices for Scientific Computing paper for more information.\n\ndownload.file(url = “https://ndownloader.figshare.com/files/2292169”, \n    destfile = “data/portal_data_joined.csv”)\n\nLoad file to R as data frame\n\nsurveys &lt;- read.csv(\"data/portal_data_joined.csv\")\n\nInspecting data frame\n\nclass(surveys)  # data type\nstr(surveys)    # structure\ndim(surveys)    # dimension\nnrow(surveys)\nncol(surveys)\nsummary(surveys)\n\nShow first/last few objects/records/rows\n\nhead(surveys)\ntail(surveys)\n\nRetreive specific element/row/column\n\nsurveys[1,1]    # element[1,1]\nsurveys[1, ]    # row 1\nsurveys[ ,1]    # column 1\nsurveys$sex # column by name\n\nDealing with factor (categorical) columns. R convert columns that contain characters to factors by default. Factors are treated as integer vectors. By default, R sorts levels in alphabetical order.\n\nlevels(surveys$sex)\nnlevels(surveys$sex)\n\n# reorder factors (to get better plots)\nsurveys$sex_ordered &lt;- factor(surveys$sex, level=c(\"F\", \"M\", \"\"))\nstr(surveys$sex_ordered)\nlevels(surveys$sex_ordered)\nnlevels(surveys$sex_ordered)\n\nPloting Histogram\n\nplot(surveys$sex)\nplos(surveys$sex_ordered)\n\n# enhance the plot\nlevels(surveys$sex_ordered)[1] &lt;- \"Female\"\nlevels(surveys$sex_ordered)[2] &lt;- \"Male\"\nplos(surveys$sex_ordered)",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#data-manipulation-using-dplyr-and-tidyr",
    "href": "src/r-basics.html#data-manipulation-using-dplyr-and-tidyr",
    "title": "R Basics",
    "section": "Data Manipulation using dplyr and tidyr",
    "text": "Data Manipulation using dplyr and tidyr\n\ntdlyr\n\nmakes manipulation of data easier\nbuilt to work with data frames directly\ncan direclty work with data stored in an external database which give the advantage of onlying brining what we need to the memoery to work on without having to bring the whole DB\n\ntidyr\n\nallows to swiftly convert b/w different data formats for plotting & analysis in order to accomodate the different requirements by different functions\n\nsometime we want one row per measurement\nothertimes we want the data aggregated like when ploting\n\n\n\nBefore using tdlyr and tidyr:\n\nInstall tidyverse package: umberella-package that install several packages (tidyr, dplyr, ggplot2 tibble, magrittr, etc.)\nLoad the package each session\n\nLoad the package\n\nlibrary(\"tidyverse\")\n\nLoad & inspect data\n\n# notice the '-' instead of '.' of basic R\nsurveys &lt;- read_csv(\"data/portal_data_joined.csv\")\n\nstr(surveys)    # structure: tbl_df (tibble)\nview(surveys)   # preview\n\n# select columns\nselect(surveys, plot_id, species_id, weight)\n\n# select all columns except ...\nselect(surveys, -sex)\n\n# choose rows based on criteria\nfilter(surveys, year == 1995)\n\nPiping: Sending the results of one function to another\n\n# in multiple steps\nsurvey_less5 &lt;- filter(surveys, weigth &lt; 5)\nsurvey_sml &lt;- select(survey_less5, species_id, sex, weight)\n\n# in one long step\nsurvey_sml &lt;- select(filter(surveys, weigth &lt; 5), species_id, sex, weight)\n\n# using pipe %&gt;% of magritter package.  Use Ctrl + Shift + M to add\nsurvey_sml &lt;- surveys %&gt;%\n    filter(weight &lt; 5) %&gt;%\n    select(species_id, sex, weight)\n\nSummary of groups of 1+ coluumn\n\n# one factor\nsurveys %&gt;%\n    group_by(sex) %&gt;%\n    summarise(mean_weight = mean(weight, na.rm = TRUE))\n    \n# two factors\nsurveys %&gt;%\n    group_by(sex, species) %&gt;%\n    summarise(mean_weight = mean(weight, na.rm = TRUE))\n\nsurveys %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n# to avoid using na.rm = FALSE each statistis\nsurveys %&gt;%\n    filter(!is.na(weight) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n())\n\n# arrange by mean weight\nsurveys %&gt;%\n    filter(!is.na(weight) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n    arrange(mean_weight)\n\n# in descending order\nsurveys %&gt;%\n    filter(!is.na(weight) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n    arrange(desc(mean_weight))\n\n# by count\n    filter(!is.na(weight) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n    arrange(count)\n\nCount of a categorical column\n\nsurveys %&gt;%\n    count(sex)\n\nReshaping with gather & spreed\n\n# prepare the needed data first\nsurveys_gw &lt;- surveys %&gt;%\n    filter(!na.rm(weight)) %&gt;%\n    group_by(genus, plot_id) %&gt;%\n    summarize(mean_weight = mean(weight))\n\n# creating a 2D table where each dimension represent a category\n# the cell will represent a statistis\nsurveys_spread &lt;- surveys_gw %&gt;%\n    spread(key = genus, value = mean_weight)\nstr(surveys_spread)\nhead(surveys_spread)\n\n# bring spread back\nsurveys_gw &lt;- surveys_spread %&gt;%\n    gather(key = genus, value = mean_weight, -plot_id)\nstr(surveys_gw)\nhead(surveys_gw)\n\nFiltering\n\n# Remove missing data\nsurvey_complete &lt;- surveys %&gt;%\n  filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))\n\n# Filter those that has sample greater than 50\nspecies_counts &lt;- survey_complete %&gt;%\n  count(species_id) %&gt;%\n  filter(n &gt;= 50)\n\n# filter only those in the indicated category\nsurveys_com &lt;- surveys %&gt;%\n    filter(species_id %in% )\n\nSaving to disk\n\nwrite_cvs()",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#visualization-using-ggplot2",
    "href": "src/r-basics.html#visualization-using-ggplot2",
    "title": "R Basics",
    "section": "Visualization Using ggplot2",
    "text": "Visualization Using ggplot2\n\nHelp in making complex plots from data frames in simple steps\nggplot graphhics are built step by step by adding new elements; this makes it flexible as well as customizable\n\nStep 1: Bind the plot to specific data frame\n\nsurveys_plot &lt;- ggplot(data = survey_complete, \n    mapping = aes(x = weight, y = hindfoot_length))\n\n# Color for each group\nsurveys_plot &lt;- ggplot(data = survey_complete, \n    mapping = aes(x = weight, y = hindfoot_length),\n    color=species_id)\n\nStep 2: Select the type of the plot\n\nscatter plot, dot plots, etc. &gt; geom_point()\nboxplots &gt; geom_boxplot()\ntrend lines, time series, etc. &gt; geom_line()\n\nScatter plot\n\nsurveys_plot + geom_point()\n\n# add transparency\nsurveys_plot + geom_point(alpha = 0.1)\n\n# color if not used in binding\nsurveys_plot + geom_point(alpah = 0.1, color = \"black\")\n\n# add color if not used in binding\nsurveys_plot + geom_point(alpaa = 0.1, aes(color = species_id))\n\n# make the color blend by introducing small ramdom variation in points locations\n# used when having small datasets\nsurveys_plot + geom_jitter(alpah = 0.1)\n\nBoxplot\n\nsurveys_plot &lt;- ggplot(data = survey_complete, \n    mapping = aes(x = species_id, y = weight))\n\nsurveys_plot + geom_boxplot()\n\n# show data\nsurvey_plot + geom_boxplot(alpah = 0.5) + \n    geom_jitter(alpha = 0.1, color = \"tomato\")\n\n# bring boxplot layer in front\nsurvey_plot + geom_jitter(alpah = 0.1, color = \"tomato\")\n    + geom_boxplot(alpha = 0.7)\n\nTime series data\n\n# create appropriate dataset\nyearly_count &lt;- survey_complete %&gt;%\n    count(year, species_id)\n\nsurveys_plot &lt;- ggplot(data = yearly_count, \n    mapping = aes(x = year, y = n))\n\nsurvey_plot + geom_line()\n\n# make it more meaningful by breaking it by category\nsurvey_plot + geom_line(aes(group = species_id))\n\n# make it more colorful\nsurvey_plot + geom_line(aes(color = species_id))\n\n# split into multiple plots\nsurvey_plot + geom_line() + facet_wrap(~ species_id)\n\n# split the line in each plot by sex\nyearly_sex_counts &lt;- survey_complete %&gt;%\n    count(year, species_id, sex)\n\nsurveys_plot &lt;- ggplot(data = yearly_sex_counts, \n    mapping = aes(x = year, y = n))\n\nsurveys_plot + geom_line(aes(color = sex))\n    + facet_wrap(~ species_id)\n\n# remove background\nsurveys_plot + geom_line(aes(color = sex))\n    + facet_wrap(~ species_id)\n    + theme_bw()\n    + theme(panel.grid = element_blank())",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/topic-modeling.html",
    "href": "src/topic-modeling.html",
    "title": "R Topic Modeling",
    "section": "",
    "text": "Understanding Sherlock Holmes Short Stories\nAmin G Alhashim 10/8/2021\n\n\nIntroduction\nThis a practice of topic modeling based on Julia Silge’s YouTube video Topic modeling with R and tidy data principles\n\n\nData Download & Prep\n\nlibrary(gutenbergr)  # to download Sherlock Holmes stories\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(tidytext)\n\n# Download stories\nsherlock_raw &lt;- gutenbergr::gutenberg_download(1661)\n\n# Remove first 28 rows\nsherlock_raw &lt;- sherlock_raw[-(1:28),]\n\n# Determining start of each story\nsherlock &lt;- sherlock_raw %&gt;% \n  # detect chapter start\n  mutate(story = ifelse(str_detect(text, \"^[MDCLXVI]+[.]\"), text, NA)) %&gt;%\n  # remove lines without header\n  filter(nchar(story) &gt; 5 | is.na(story)) %&gt;% \n  # fill down the chapter namem \n  fill(story) %&gt;%\n  # convert to factor\n  mutate(story = factor(story, levels = unique(story)))\n\n# Put in in tidytext dataframe\ntidy_sherlock &lt;- sherlock %&gt;% \n  mutate(line = row_number()) %&gt;% \n  # break the text column into tokens, create new column, and place the token into\n  unnest_tokens(word, text) %&gt;% \n  # remove stopwords\n  anti_join(stop_words) %&gt;% \n  # remove holmes that might affect our topic models\n  filter(word != \"holmes\")\n\n\n\nExplore tf-idf\n\nTo see which words are important in each story, i.e.,the words that appears many times in that story but few or none in the other stories.\ntf-idf is a great exploratory tool before starting with topic modeling\n\n\nlibrary(ggplot2)\n\ntidy_sherlock %&gt;% \n  # count number of occurance of words in stories\n  count(story, word, sort = TRUE) %&gt;% \n  # compute and add tf, idf, and tf_idf values for words\n  bind_tf_idf(word, story, n) %&gt;% \n  # group by story\n  group_by(story) %&gt;% \n  # take top 10 words of each story with higest tf_idf (last column)\n  top_n(10) %&gt;% \n  # unpack\n  ungroup() %&gt;% \n  # turn words into factors and order them based on their tf_idf values\n  # NOTE: This will not affect order the dataframe rows which is can be\n  #   done via the arrange function\n  # NOTE: Recording the word column this way is for ggplot to visualize them\n  #   as desired from top tf_idf to lowest\n  mutate(word = reorder(word, tf_idf)) %&gt;% \n  ggplot(aes(word, tf_idf, fill = story)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~story, scales = \"free\", ncol = 3) +\n  theme(strip.text.x = element_text(size = 5)) +\n  coord_flip()\n\n\n\n\nImplement Topic Modeling\nTraining the model for the topics\n\nlibrary(stm)        # for do topic modeling\nlibrary(quanteda)   # great text mining, will be used to structure the input\n                    #   to stm\n\n# Convert from tidy form to quanteda form (document x term matrix)\nsherlock_stm &lt;- tidy_sherlock %&gt;% \n  count(story, word, sort = TRUE) %&gt;% \n  cast_dfm(story, word, n)\n\n# Train the model\ntopic_model &lt;- stm(sherlock_stm, K = 6, init.type = \"Spectral\")\n\n## Beginning Spectral Initialization \n##   Calculating the gram matrix...\n##   Finding anchor words...\n##      ......\n##   Recovering initialization...\n##      ..........................................................................\n## Initialization complete.\n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 1 (approx. per word bound = -7.753) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 2 (approx. per word bound = -7.535, relative change = 2.817e-02) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 3 (approx. per word bound = -7.439, relative change = 1.274e-02) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 4 (approx. per word bound = -7.415, relative change = 3.114e-03) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 5 (approx. per word bound = -7.406, relative change = 1.256e-03) \n## Topic 1: st, simon, lord, day, lady \n##  Topic 2: red, hat, sir, goose, stone \n##  Topic 3: street, matter, hosmer, door, woman \n##  Topic 4: father, mccarthy, time, son, hand \n##  Topic 5: miss, door, night, rucastle, light \n##  Topic 6: door, house, time, night, matter \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 6 (approx. per word bound = -7.402, relative change = 5.850e-04) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 7 (approx. per word bound = -7.401, relative change = 9.915e-05) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Model Converged\n\nsummary(topic_model)\n\n## A topic model with 6 topics, 12 documents and a 7496 word dictionary.\n\n## Topic 1 Top Words:\n##       Highest Prob: st, simon, lord, day, lady, found, matter \n##       FREX: simon, clair, neville, lascar, opium, doran, pa \n##       Lift: aloysius, ceremony, doran, millar, pennies, _morning, 2_s_ \n##       Score: simon, st, clair, neville, frank, _danseuse_, lestrade \n## Topic 2 Top Words:\n##       Highest Prob: red, hat, sir, goose, stone, time, business \n##       FREX: goose, geese, horner, ryder, henry, peterson, wilson \n##       Lift: _disjecta, _echo_, _evening, _globe_, _our_, _pall, _st \n##       Score: goose, geese, wilson, horner, bird, _disjecta, league \n## Topic 3 Top Words:\n##       Highest Prob: street, matter, hosmer, woman, photograph, door, angel \n##       FREX: hosmer, angel, windibank, majesty, briony, photograph, king \n##       Lift: godfrey, leadenhall, mask, _affaire, _bijou_, _chronicle_, _dénouement_ \n##       Score: hosmer, angel, windibank, photograph, majesty, _affaire, adler \n## Topic 4 Top Words:\n##       Highest Prob: father, mccarthy, time, son, lestrade, hand, left \n##       FREX: mccarthy, pool, boscombe, openshaw, pips, horsham, turner \n##       Lift: dundee, horsham, pondicherry, savannah, sundial, _lone, 1869 \n##       Score: mccarthy, pool, lestrade, boscombe, openshaw, _métier_, turner \n## Topic 5 Top Words:\n##       Highest Prob: miss, door, night, rucastle, light, house, lady \n##       FREX: rucastle, hunter, stoner, toller, roylott, ventilator, beeches \n##       Lift: fowler, inhabited, slit, terrified, winchester, accept, armitage \n##       Score: rucastle, hunter, stoner, toller, _can_, roylott, ventilator \n## Topic 6 Top Words:\n##       Highest Prob: door, house, time, night, matter, coronet, morning \n##       FREX: coronet, arthur, gems, snow, hydraulic, colonel, holder \n##       Lift: fee, hastened, hydraulic, _en, 16a, 200, 4000 \n##       Score: coronet, arthur, gems, 200, snow, colonel, holder\n\n\nContribution of Words in Topics\nLooking at which words contribute the most in each topic.\n\n# Extracting betas and putting them in a tidy format\ntm_beta &lt;- tidy(topic_model)\n\n# Visualizing the top words contributing to each topic\ntm_beta %&gt;% \n  group_by(topic) %&gt;% \n  # top 10 word in each topic with higest beta (last column)\n  top_n(10) %&gt;% \n  ungroup() %&gt;% \n  # turn words into factors and order them based on their tf_idf values\n  # NOTE: This will not affect order the dataframe rows which is can be\n  #   done via the arrange function\n  # NOTE: Recording the word column this way is for ggplot to visualize them\n  #   as desired from top tf_idf to lowest\n  mutate(term = reorder(term, beta)) %&gt;% \n  ggplot(aes(term, beta, fill = topic)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~topic, scales = \"free\", ncol = 3) +\n  coord_flip()\n\n\n\n\nDistribution of Topics in Stories\nLooking at how the stories are associated with each topic and how strong each association is.\n\n# Extracting gammas and putting them in a tidy format\ntm_gamma &lt;- tidy(topic_model, matrix = \"gamma\",\n                 # use the names of the stories instead of the default numbers\n                 document_names = rownames(sherlock_stm))\n\n\n# Visualizing the number of stories belonging to each topics and the confidence\n#   of the belonging\ntm_gamma %&gt;% \n  ggplot(aes(gamma, fill = as.factor(topic))) +\n  geom_histogram(show.legend = FALSE) +\n  facet_wrap(~topic, ncol = 3)\n\n\n\n# Visualizing how much each topic appear in each story\ntm_gamma %&gt;% \n  ggplot(aes(topic, gamma, fill = document)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~document, scales = \"free\", ncol = 3) +\n  theme(strip.text.x = element_text(size = 5))\n\n The model did an excellent job strongly associating the stories into one or more topics. This perfect association is rare in the world of topic modeling. The reason behind this perfect association here could be due to the small number of documents that we have.",
    "crumbs": [
      "Index",
      "R Topic Modeling"
    ]
  }
]