[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workspace",
    "section": "",
    "text": "Welcome\nThis Quarto Book1 is a workspace for the notes and projects of the programming/scripting languages that I am learning.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Workspace",
    "section": "",
    "text": "Quarto Books Documentation↩︎",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "src/notebooks/_notebooks.html",
    "href": "src/notebooks/_notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "This section contains notes for the programming/scripting languages that I am learning.",
    "crumbs": [
      "Notebooks"
    ]
  },
  {
    "objectID": "src/notebooks/r.html",
    "href": "src/notebooks/r.html",
    "title": "\n1  R\n",
    "section": "",
    "text": "1.1 General Notes",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#general-notes",
    "href": "src/notebooks/r.html#general-notes",
    "title": "\n1  R\n",
    "section": "",
    "text": "When writing R code, create a project instead of a file which will enable saving the workspace settings\nAn R package usually includes:\n\nreusable functions\ndocumentation describing how to use the function\nsample data\n\n\nBefore running a project, clear the objects in its workspace environment to avoid mixing up objects created in other files. This can be done either:\n\npragmatically as shown below OR\nEnvironment window -&gt; Broom icon",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#clear-workspace",
    "href": "src/notebooks/r.html#clear-workspace",
    "title": "\n1  R\n",
    "section": "\n1.2 Clear Workspace",
    "text": "1.2 Clear Workspace\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\nrm(list = ls())",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#sec-packages",
    "href": "src/notebooks/r.html#sec-packages",
    "title": "\n1  R\n",
    "section": "\n1.3 Packages",
    "text": "1.3 Packages\n\n1.3.1 List\nList all the packages that will be used in this script.\n\npackages &lt;- c(\"here\")\n\n\n1.3.2 Install Missing\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n\n\n1.3.3 Load\nLoad all packages\n\n# Do NOT modify\nlapply(packages, require, character.only = TRUE)\n\n[[1]]\n[1] TRUE",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#data-types",
    "href": "src/notebooks/r.html#data-types",
    "title": "\n1  R\n",
    "section": "\n1.4 Data Types",
    "text": "1.4 Data Types\n\ncharacter\nnumeric\nlogical\nraw\nimaginary numbers\n\nTo know the datatype of an object, run the command:\n\nclass(x) # give the data type of x\n\n\n1.4.1 Mixing Data Types\n\ncharacter + numeric –&gt; character\nnumeric + logical –&gt; numeric\nnumeric + character + logical –&gt; character",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#data-structures",
    "href": "src/notebooks/r.html#data-structures",
    "title": "\n1  R\n",
    "section": "\n1.5 Data Structures",
    "text": "1.5 Data Structures\n\n\nvector: hold single type of data\n\n\n\n\n\n\n\nCreating Vector\n\n\n\nThe c() function (combine multiple elements) can be used to create vectors in R.\nx &lt;- c(1, 2, 3, 4)\n\n\n\n\nmatrix: 2D vector\n\narray: nD vector\n\nlist: generic vector, can hold mixed type of data, eg, one element can a character, another a list of integers, and the third could be a logical\n\ndata frame: table where columns represent vectors\n\ntibbles: data frames, but slightly tweaked to work better with tidyverse–when printing tibbles, only the first few columns that fit into the screen will be shown\n\n\n\n\n\n\n\nPrinting tibble All Columns\n\n\n\nTo force the print() function to print all the columns of a tibble, set the width parameter to Inf as follows:\n\nprint(ds, width = Inf)\n\n\n\nTo construct small tibble by hand, use the tribble function as follows:\n\ndf &lt;- tribble(\n  ~var1, ~var2, ~var3\n  \"A\", 1, TRUE,\n  \"B\", 2, FALSE,\n  \"C\", 3, TRUE\n)\n\n\nfactor\n\n\n\n\n\n\n\n\nFigure 1.1: Common data structures in R (Source: Grolemund, 2014)\n\n\n\n\nTo know the data structure and length of the object, run the command:\n\nstr(x) # give the structure type of x\nlength(x) # length of structure",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#basics-operations",
    "href": "src/notebooks/r.html#basics-operations",
    "title": "\n1  R\n",
    "section": "\n1.6 Basics Operations",
    "text": "1.6 Basics Operations\nAssignment\n\nx &lt;- 3 # assign 3 to x (x gets 3)\n(x &lt;- 3) # assign 3 to x (x gets 3) & print the result to console\n\n[1] 3\n\n\nGetting Help\n\nargs(round) # print the argument list of function\n?round # show documentation of function in Help window\n\nDealing with Structure\n\n# concatenate set of values to create vector\nweight_g &lt;- c(50, 60, 3, 9)\nanimals &lt;- c(\"dog\", \"bat\", \"cat\")\n\n# utilizing logical values to pull specific values\nweight_g[weight_g &lt; 10 & weight_g &gt; 60 | weight_g == 50]\n\n[1] 50\n\n# pull dog & cat records\nanimals[animals %in% c(\"dog\", \"cat\")]\n\n[1] \"dog\" \"cat\"\n\nanimals[animals == \"dog\" | animals == \"cat\"]\n\n[1] \"dog\" \"cat\"\n\n\nStatistics\n\n# signaling missing data using NA\nheights &lt;- c(2, 3, NA, 4)\n\n# get mean while ignoring missing data\nmean(heights, na.rm = TRUE)\n\n[1] 3\n\n# how to use mean\n# ?mean",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#exploratory-operations",
    "href": "src/notebooks/r.html#exploratory-operations",
    "title": "\n1  R\n",
    "section": "\n1.7 Exploratory Operations",
    "text": "1.7 Exploratory Operations\nThe here package makes it easy to point to files starting from the project main directory.\n\nlibrary(here)\n\nLoading file from repository and saving it locally on disk. It is always a good idea to structure the workspace–for more information, see Best Practices for Scientific Computing paper.\n\ndownload.file(\n  url = \"https://ndownloader.figshare.com/files/2292169\",\n  destfile = here(\"data\", \"portal_data_joined.csv\")\n)\n\nLoad file to R as data frame\n\nsurveys &lt;- read.csv(here(\"data\", \"portal_data_joined.csv\"))\n\nInspecting data frame\n\nclass(surveys) # data type\n\n[1] \"data.frame\"\n\n\n\nstr(surveys) # structure\n\n'data.frame':   34786 obs. of  13 variables:\n $ record_id      : int  1 72 224 266 349 363 435 506 588 661 ...\n $ month          : int  7 8 9 10 11 11 12 1 2 3 ...\n $ day            : int  16 19 13 16 12 12 10 8 18 11 ...\n $ year           : int  1977 1977 1977 1977 1977 1977 1977 1978 1978 1978 ...\n $ plot_id        : int  2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr  \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr  \"M\" \"M\" \"\" \"\" ...\n $ hindfoot_length: int  32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : int  NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : chr  \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr  \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr  \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr  \"Control\" \"Control\" \"Control\" \"Control\" ...\n\n\n\ndim(surveys) # dimensions\n\n[1] 34786    13\n\nnrow(surveys)\n\n[1] 34786\n\nncol(surveys)\n\n[1] 13\n\n\n\nsummary(surveys)\n\n   record_id         month             day            year         plot_id     \n Min.   :    1   Min.   : 1.000   Min.   : 1.0   Min.   :1977   Min.   : 1.00  \n 1st Qu.: 8964   1st Qu.: 4.000   1st Qu.: 9.0   1st Qu.:1984   1st Qu.: 5.00  \n Median :17762   Median : 6.000   Median :16.0   Median :1990   Median :11.00  \n Mean   :17804   Mean   : 6.474   Mean   :16.1   Mean   :1990   Mean   :11.34  \n 3rd Qu.:26655   3rd Qu.:10.000   3rd Qu.:23.0   3rd Qu.:1997   3rd Qu.:17.00  \n Max.   :35548   Max.   :12.000   Max.   :31.0   Max.   :2002   Max.   :24.00  \n                                                                               \n  species_id            sex            hindfoot_length     weight      \n Length:34786       Length:34786       Min.   : 2.00   Min.   :  4.00  \n Class :character   Class :character   1st Qu.:21.00   1st Qu.: 20.00  \n Mode  :character   Mode  :character   Median :32.00   Median : 37.00  \n                                       Mean   :29.29   Mean   : 42.67  \n                                       3rd Qu.:36.00   3rd Qu.: 48.00  \n                                       Max.   :70.00   Max.   :280.00  \n                                       NA's   :3348    NA's   :2503    \n    genus             species              taxa            plot_type        \n Length:34786       Length:34786       Length:34786       Length:34786      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n\n\nShow first/last few objects/records/rows\n\nhead(surveys)\n\n  record_id month day year plot_id species_id sex hindfoot_length weight\n1         1     7  16 1977       2         NL   M              32     NA\n2        72     8  19 1977       2         NL   M              31     NA\n3       224     9  13 1977       2         NL                  NA     NA\n4       266    10  16 1977       2         NL                  NA     NA\n5       349    11  12 1977       2         NL                  NA     NA\n6       363    11  12 1977       2         NL                  NA     NA\n    genus  species   taxa plot_type\n1 Neotoma albigula Rodent   Control\n2 Neotoma albigula Rodent   Control\n3 Neotoma albigula Rodent   Control\n4 Neotoma albigula Rodent   Control\n5 Neotoma albigula Rodent   Control\n6 Neotoma albigula Rodent   Control\n\ntail(surveys)\n\n      record_id month day year plot_id species_id sex hindfoot_length weight\n34781     26787     9  27 1997       7         PL   F              21     16\n34782     26966    10  25 1997       7         PL   M              20     16\n34783     27185    11  22 1997       7         PL   F              21     22\n34784     27792     5   2 1998       7         PL   F              20      8\n34785     28806    11  21 1998       7         PX                  NA     NA\n34786     30986     7   1 2000       7         PX                  NA     NA\n            genus  species   taxa        plot_type\n34781  Peromyscus leucopus Rodent Rodent Exclosure\n34782  Peromyscus leucopus Rodent Rodent Exclosure\n34783  Peromyscus leucopus Rodent Rodent Exclosure\n34784  Peromyscus leucopus Rodent Rodent Exclosure\n34785 Chaetodipus      sp. Rodent Rodent Exclosure\n34786 Chaetodipus      sp. Rodent Rodent Exclosure\n\n\n\n1.7.1 Retrieve specific element/row/column\n\nsurveys[1, 1] # element[1,1]\n\n[1] 1\n\nsurveys[1, ] # row 1\n\n  record_id month day year plot_id species_id sex hindfoot_length weight\n1         1     7  16 1977       2         NL   M              32     NA\n    genus  species   taxa plot_type\n1 Neotoma albigula Rodent   Control\n\nhead(surveys[, 1]) # column 1\n\n[1]   1  72 224 266 349 363\n\nhead(surveys$sex) # column by name\n\n[1] \"M\" \"M\" \"\"  \"\"  \"\"  \"\" \n\n\n\n1.7.2 Dealing with factor (categorical) columns\nR convert columns that contain characters to factors by default. Factors are treated as integer vectors. By default, R sorts levels in alphabetical order.\n\nlevels(surveys$sex)\n\nNULL\n\nnlevels(surveys$sex)\n\n[1] 0\n\n\nReorder factors (to get better plots)\n\nsurveys$sex_ordered &lt;- factor(surveys$sex, level = c(\"F\", \"M\", \"\"))\nstr(surveys$sex_ordered)\n\n Factor w/ 3 levels \"F\",\"M\",\"\": 2 2 3 3 3 3 3 3 2 3 ...\n\nlevels(surveys$sex_ordered)\n\n[1] \"F\" \"M\" \"\" \n\nnlevels(surveys$sex_ordered)\n\n[1] 3\n\n\n\n1.7.3 Basic Plotting\nHistogram\n\n# plot(surveys$sex)  # not possible\nplot(surveys$sex_ordered)\n\n\n\n\n\n\n\nEnhance the plot\n\nlevels(surveys$sex_ordered)[1] &lt;- \"Female\"\nlevels(surveys$sex_ordered)[2] &lt;- \"Male\"\nplot(surveys$sex_ordered)",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#data-manipulation",
    "href": "src/notebooks/r.html#data-manipulation",
    "title": "\n1  R\n",
    "section": "\n1.8 Data Manipulation",
    "text": "1.8 Data Manipulation\n\n\ntdlyr\n\nmakes manipulation of data easier\nbuilt to work with data frames directly\ncan directly work with data stored in an external database which give the advantage of only bringing what we need to the memory to work on without having to bring the whole database\n\n\n\ntidyr\n\nallows to swiftly convert b/w different data formats for plotting & analysis in order to accommodate the different requirements by different functions\n\nsometime we want one row per measurement\nother times we want the data aggregated like when plotting\n\n\n\n\n\nBefore using tdlyr and tidyr:\n\nInstall tidyverse package: umbrella-package that install several packages (tidyr, dplyr, ggplot2 tibble, magrittr, etc.)\nLoad the package each session\n\nLoad packages\n\nlibrary(\"tidyverse\")\n\nLoad & inspect data\n\n# notice the '_' instead of '.' of basic R\nsurveys &lt;- read_csv(here(\"data\", \"portal_data_joined.csv\"))\n\nRows: 34786 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): species_id, sex, genus, species, taxa, plot_type\ndbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstr(surveys) # structure: tbl_df (tibble)\n\nspc_tbl_ [34,786 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ record_id      : num [1:34786] 1 72 224 266 349 363 435 506 588 661 ...\n $ month          : num [1:34786] 7 8 9 10 11 11 12 1 2 3 ...\n $ day            : num [1:34786] 16 19 13 16 12 12 10 8 18 11 ...\n $ year           : num [1:34786] 1977 1977 1977 1977 1977 ...\n $ plot_id        : num [1:34786] 2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr [1:34786] \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr [1:34786] \"M\" \"M\" NA NA ...\n $ hindfoot_length: num [1:34786] 32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : num [1:34786] NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : chr [1:34786] \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr [1:34786] \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr [1:34786] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr [1:34786] \"Control\" \"Control\" \"Control\" \"Control\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   record_id = col_double(),\n  ..   month = col_double(),\n  ..   day = col_double(),\n  ..   year = col_double(),\n  ..   plot_id = col_double(),\n  ..   species_id = col_character(),\n  ..   sex = col_character(),\n  ..   hindfoot_length = col_double(),\n  ..   weight = col_double(),\n  ..   genus = col_character(),\n  ..   species = col_character(),\n  ..   taxa = col_character(),\n  ..   plot_type = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n# view(surveys) # preview in the viewer window, avoid when rendering\n\n\n1.8.1 Selection\nSelect certain columns\n\nselect(surveys, plot_id, species_id, weight)\n\n# A tibble: 34,786 × 3\n   plot_id species_id weight\n     &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1       2 NL             NA\n 2       2 NL             NA\n 3       2 NL             NA\n 4       2 NL             NA\n 5       2 NL             NA\n 6       2 NL             NA\n 7       2 NL             NA\n 8       2 NL             NA\n 9       2 NL            218\n10       2 NL             NA\n# ℹ 34,776 more rows\n\n\nSelect all columns except …\n\nselect(surveys, -sex)\n\n# A tibble: 34,786 × 12\n   record_id month   day  year plot_id species_id hindfoot_length weight genus  \n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1         1     7    16  1977       2 NL                      32     NA Neotoma\n 2        72     8    19  1977       2 NL                      31     NA Neotoma\n 3       224     9    13  1977       2 NL                      NA     NA Neotoma\n 4       266    10    16  1977       2 NL                      NA     NA Neotoma\n 5       349    11    12  1977       2 NL                      NA     NA Neotoma\n 6       363    11    12  1977       2 NL                      NA     NA Neotoma\n 7       435    12    10  1977       2 NL                      NA     NA Neotoma\n 8       506     1     8  1978       2 NL                      NA     NA Neotoma\n 9       588     2    18  1978       2 NL                      NA    218 Neotoma\n10       661     3    11  1978       2 NL                      NA     NA Neotoma\n# ℹ 34,776 more rows\n# ℹ 3 more variables: species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nSelect rows based on criteria\n\nfilter(surveys, year == 1995)\n\n# A tibble: 1,180 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1     22314     6     7  1995       2 NL         M                  34     NA\n 2     22728     9    23  1995       2 NL         F                  32    165\n 3     22899    10    28  1995       2 NL         F                  32    171\n 4     23032    12     2  1995       2 NL         F                  33     NA\n 5     22003     1    11  1995       2 DM         M                  37     41\n 6     22042     2     4  1995       2 DM         F                  36     45\n 7     22044     2     4  1995       2 DM         M                  37     46\n 8     22105     3     4  1995       2 DM         F                  37     49\n 9     22109     3     4  1995       2 DM         M                  37     46\n10     22168     4     1  1995       2 DM         M                  36     48\n# ℹ 1,170 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\n\n1.8.2 Piping\nSending the results of one function to another\n\n# in multiple steps\nsurvey_less5 &lt;- filter(surveys, weight &lt; 5)\nsurvey_sml &lt;- select(survey_less5, species_id, sex, weight)\n\n# in one long step\nsurvey_sml &lt;- select(filter(surveys, weight &lt; 5), species_id, sex, weight)\n\n# using pipe %&gt;% of magritter package.  Use Ctrl + Shift + M to add\nsurvey_sml &lt;- surveys %&gt;%\n  filter(weight &lt; 5) %&gt;%\n  select(species_id, sex, weight)\n\n\n1.8.3 Summary\nSummary of groups (1+ columns)\none factor\n\nsurveys %&gt;%\n  group_by(sex) %&gt;%\n  summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  sex   mean_weight\n  &lt;chr&gt;       &lt;dbl&gt;\n1 F            42.2\n2 M            43.0\n3 &lt;NA&gt;         64.7\n\n\ntwo factors\n\nsurveys %&gt;%\n  group_by(sex, species) %&gt;%\n  summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 81 × 3\n# Groups:   sex [3]\n   sex   species     mean_weight\n   &lt;chr&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1 F     albigula         154.  \n 2 F     baileyi           30.2 \n 3 F     eremicus          22.8 \n 4 F     flavus             7.97\n 5 F     fulvescens        13.7 \n 6 F     fulviventer       69   \n 7 F     hispidus          69.0 \n 8 F     leucogaster       31.1 \n 9 F     leucopus          19.3 \n10 F     maniculatus       22.1 \n# ℹ 71 more rows\n\nsurveys %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 81 × 3\n# Groups:   species [40]\n   species         sex   mean_weight\n   &lt;chr&gt;           &lt;chr&gt;       &lt;dbl&gt;\n 1 albigula        F           154. \n 2 albigula        M           166. \n 3 albigula        &lt;NA&gt;        168. \n 4 audubonii       &lt;NA&gt;        NaN  \n 5 baileyi         F            30.2\n 6 baileyi         M            33.8\n 7 baileyi         &lt;NA&gt;         30.6\n 8 bilineata       &lt;NA&gt;        NaN  \n 9 brunneicapillus &lt;NA&gt;        NaN  \n10 chlorurus       &lt;NA&gt;        NaN  \n# ℹ 71 more rows\n\n\nto avoid using na.rm = FALSE each statistics\n\nsurveys %&gt;%\n  filter(!is.na(weight)) %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n())\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species  sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 albigula F          154.      39.2        652\n 2 albigula M          166.      49.0        484\n 3 albigula &lt;NA&gt;       168.      44.2         16\n 4 baileyi  F           30.2      5.27      1617\n 5 baileyi  M           33.8      8.27      1188\n 6 baileyi  &lt;NA&gt;        30.6      9.96         5\n 7 eremicus F           22.8      4.57       568\n 8 eremicus M           20.6      3.49       689\n 9 eremicus &lt;NA&gt;        17.7      0.577        3\n10 flavus   F            7.97     1.69       742\n# ℹ 49 more rows\n\n\narrange by mean weight\n\nsurveys %&gt;%\n  filter(!is.na(weight)) %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n  arrange(mean_weight)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species   sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 flavus    &lt;NA&gt;         6        1.63         4\n 2 taylori   M            7.36     0.842       14\n 3 flavus    M            7.89     1.59       802\n 4 flavus    F            7.97     1.69       742\n 5 taylori   F            9.16     2.24        31\n 6 montanus  M            9.5      1.29         4\n 7 megalotis M           10.1      1.73      1339\n 8 montanus  F           11        2.16         4\n 9 megalotis &lt;NA&gt;        11.1      2.57        12\n10 megalotis F           11.1      2.56      1184\n# ℹ 49 more rows\n\n\nin descending order\n\nsurveys %&gt;%\n  filter(!is.na(weight)) %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n  arrange(desc(mean_weight))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species     sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 albigula    &lt;NA&gt;        168.       44.2       16\n 2 albigula    M           166.       49.0      484\n 3 albigula    F           154.       39.2      652\n 4 hispidus    &lt;NA&gt;        130        NA          1\n 5 spilosoma   M           130        NA          1\n 6 spectabilis M           122.       24.0     1220\n 7 spectabilis &lt;NA&gt;        120        18.5       18\n 8 spectabilis F           118.       21.5     1106\n 9 fulviventer F            69        37.8       16\n10 hispidus    F            69.0      29.7       98\n# ℹ 49 more rows\n\n\nby count\n\nsurveys %&gt;%\n  filter(!is.na(weight)) %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n  arrange(sd_count)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species     sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 hispidus    &lt;NA&gt;        130      NA            1\n 2 intermedius &lt;NA&gt;         18      NA            1\n 3 leucopus    &lt;NA&gt;         25      NA            1\n 4 spilosoma   F            57      NA            1\n 5 spilosoma   M           130      NA            1\n 6 fulviventer &lt;NA&gt;         40.5     6.36         2\n 7 leucogaster &lt;NA&gt;         29      11.3          2\n 8 eremicus    &lt;NA&gt;         17.7     0.577        3\n 9 ordii       &lt;NA&gt;         50.7     6.51         3\n10 sp.         F            20.7     1.15         3\n# ℹ 49 more rows\n\n\n\n1.8.4 Count\nCount of a categorical column\n\nsurveys %&gt;%\n  count(sex)\n\n# A tibble: 3 × 2\n  sex       n\n  &lt;chr&gt; &lt;int&gt;\n1 F     15690\n2 M     17348\n3 &lt;NA&gt;   1748\n\n\n\n1.8.5 Reshaping\nUsing gather & spreed\nprepare the needed data first\n\nsurveys_gw &lt;- surveys %&gt;%\n  filter(!is.na(weight)) %&gt;%\n  group_by(genus, plot_id) %&gt;%\n  summarize(mean_weight = mean(weight))\n\n`summarise()` has grouped output by 'genus'. You can override using the\n`.groups` argument.\n\n\ncreating a 2D table where each dimension represent a category the cell will represent a statistics\n\nsurveys_spread &lt;- surveys_gw %&gt;%\n  spread(key = genus, value = mean_weight)\nstr(surveys_spread)\n\ntibble [24 × 11] (S3: tbl_df/tbl/data.frame)\n $ plot_id        : num [1:24] 1 2 3 4 5 6 7 8 9 10 ...\n $ Baiomys        : num [1:24] 7 6 8.61 NA 7.75 ...\n $ Chaetodipus    : num [1:24] 22.2 25.1 24.6 23 18 ...\n $ Dipodomys      : num [1:24] 60.2 55.7 52 57.5 51.1 ...\n $ Neotoma        : num [1:24] 156 169 158 164 190 ...\n $ Onychomys      : num [1:24] 27.7 26.9 26 28.1 27 ...\n $ Perognathus    : num [1:24] 9.62 6.95 7.51 7.82 8.66 ...\n $ Peromyscus     : num [1:24] 22.2 22.3 21.4 22.6 21.2 ...\n $ Reithrodontomys: num [1:24] 11.4 10.7 10.5 10.3 11.2 ...\n $ Sigmodon       : num [1:24] NA 70.9 65.6 82 82.7 ...\n $ Spermophilus   : num [1:24] NA NA NA NA NA NA NA NA NA NA ...\n\nhead(surveys_spread)\n\n# A tibble: 6 × 11\n  plot_id Baiomys Chaetodipus Dipodomys Neotoma Onychomys Perognathus Peromyscus\n    &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1       1    7           22.2      60.2    156.      27.7        9.62       22.2\n2       2    6           25.1      55.7    169.      26.9        6.95       22.3\n3       3    8.61        24.6      52.0    158.      26.0        7.51       21.4\n4       4   NA           23.0      57.5    164.      28.1        7.82       22.6\n5       5    7.75        18.0      51.1    190.      27.0        8.66       21.2\n6       6   NA           24.9      58.6    180.      25.9        7.81       21.8\n# ℹ 3 more variables: Reithrodontomys &lt;dbl&gt;, Sigmodon &lt;dbl&gt;, Spermophilus &lt;dbl&gt;\n\n\nbring spread back\n\nsurveys_gw &lt;- surveys_spread %&gt;%\n  gather(key = genus, value = mean_weight, -plot_id)\nstr(surveys_gw)\n\ntibble [240 × 3] (S3: tbl_df/tbl/data.frame)\n $ plot_id    : num [1:240] 1 2 3 4 5 6 7 8 9 10 ...\n $ genus      : chr [1:240] \"Baiomys\" \"Baiomys\" \"Baiomys\" \"Baiomys\" ...\n $ mean_weight: num [1:240] 7 6 8.61 NA 7.75 ...\n\nhead(surveys_gw)\n\n# A tibble: 6 × 3\n  plot_id genus   mean_weight\n    &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n1       1 Baiomys        7   \n2       2 Baiomys        6   \n3       3 Baiomys        8.61\n4       4 Baiomys       NA   \n5       5 Baiomys        7.75\n6       6 Baiomys       NA   \n\n\n\n1.8.6 Filtering\nRemove missing data\n\nsurvey_complete &lt;- surveys %&gt;%\n  filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))\n\nFilter those that has sample greater than 50\n\nspecies_counts &lt;- survey_complete %&gt;%\n  count(species_id) %&gt;%\n  filter(n &gt;= 50)\n\nfilter only those in the indicated category\n\nsurveys_com &lt;- surveys %&gt;%\n  filter(species_id %in% c(\"albigula\", \"eremicus\"))\n\n\n1.8.7 Saving to disk\n\nwrite_cvs()",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#visualization",
    "href": "src/notebooks/r.html#visualization",
    "title": "\n1  R\n",
    "section": "\n1.9 Visualization",
    "text": "1.9 Visualization\n\nHelp in making complex plots from data frames in simple steps\nggplot graphics are built step by step by adding new elements; this makes it flexible as well as customization\n\nStep 1: Bind the plot to specific data frame\n\nsurveys_plot &lt;- ggplot(\n  data = survey_complete,\n  mapping = aes(x = weight, y = hindfoot_length)\n)\n\n# Color for each group\nsurveys_plot &lt;- ggplot(\n  data = survey_complete,\n  mapping = aes(x = weight, y = hindfoot_length),\n  color = species_id\n)\n\nStep 2: Select the type of the plot\n\nscatter plot, dot plots, etc. &gt; geom_point()\nboxplots &gt; geom_boxplot()\ntrend lines, time series, etc. &gt; geom_line()\n\n\n1.9.1 Scatter plot\n\nsurveys_plot + geom_point()\n\n\n\n\n\n\n# add transparency\nsurveys_plot + geom_point(alpha = 0.1)\n\n\n\n\n\n\n# color if not used in binding\nsurveys_plot + geom_point(alpha = 0.1, color = \"black\")\n\n\n\n\n\n\n# add color if not used in binding\nsurveys_plot + geom_point(alpha = 0.1, aes(color = species_id))\n\n\n\n\n\n\n# make the color blend by introducing small random variation in points locations\n# used when having small data sets\nsurveys_plot + geom_jitter(alpha = 0.1)\n\n\n\n\n\n\n\n\n1.9.2 Boxplot\n\nsurveys_plot &lt;- ggplot(\n  data = survey_complete,\n  mapping = aes(x = species_id, y = weight)\n)\n\nsurveys_plot + geom_boxplot()\n\n\n\n\n\n\n# show data\nsurveys_plot + geom_boxplot(alpha = 0.5) +\n  geom_jitter(alpha = 0.1, color = \"tomato\")\n\n\n\n\n\n\n# bring boxplot layer in front\nsurveys_plot + geom_jitter(alpha = 0.1, color = \"tomato\") +\n  geom_boxplot(alpha = 0.7)\n\n\n\n\n\n\n\n\n1.9.3 Time series data\n\n# create appropriate dataset\nyearly_count &lt;- survey_complete %&gt;%\n  count(year, species_id)\n\nsurveys_plot &lt;- ggplot(\n  data = yearly_count,\n  mapping = aes(x = year, y = n)\n)\n\nsurveys_plot + geom_line()\n\n\n\n\n\n\n# make it more meaningful by breaking it by category\nsurveys_plot + geom_line(aes(group = species_id))\n\n\n\n\n\n\n# make it more colorful\nsurveys_plot + geom_line(aes(color = species_id))\n\n\n\n\n\n\n# split into multiple plots\nsurveys_plot + geom_line() + facet_wrap(~species_id)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n# split the line in each plot by sex\nyearly_sex_counts &lt;- survey_complete %&gt;%\n  count(year, species_id, sex)\n\nsurveys_plot &lt;- ggplot(\n  data = yearly_sex_counts,\n  mapping = aes(x = year, y = n)\n)\n\nsurveys_plot + geom_line(aes(color = sex)) +\n  facet_wrap(~species_id)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n# remove background\nsurveys_plot + geom_line(aes(color = sex)) +\n  facet_wrap(~species_id) +\n  theme_bw() +\n  theme(panel.grid = element_blank())\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/r.html#references",
    "href": "src/notebooks/r.html#references",
    "title": "\n1  R\n",
    "section": "\n1.10 References",
    "text": "1.10 References\n\nOU Software Carpentry Workshop (check other workshops here)\n\nMain Tutorial\nData Carpentry with R\nSoftware Carpentry with R\nEtherpad\nGoogle Doc\n\n\n\nIntro to ggplot by Allison Horst\n\nR for Data Science book by Garrett Grolemund and Hadley Wickham\nBest Practices for Scientific Computing paper",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R</span>"
    ]
  },
  {
    "objectID": "src/notebooks/quarto.html",
    "href": "src/notebooks/quarto.html",
    "title": "2  Quarto",
    "section": "",
    "text": "2.1 Render & Review",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "src/notebooks/quarto.html#render-review",
    "href": "src/notebooks/quarto.html#render-review",
    "title": "2  Quarto",
    "section": "",
    "text": "VSCode/RStudio -&gt; Render button\nTerminal -&gt; quarto preview\nTerminal -&gt; quarto preview help",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "src/notebooks/quarto.html#render-wo-review",
    "href": "src/notebooks/quarto.html#render-wo-review",
    "title": "2  Quarto",
    "section": "2.2 Render w/o Review",
    "text": "2.2 Render w/o Review\n\nTerminal -&gt; quarto render\nTerminal -&gt; quarto render help",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "src/notebooks/quarto.html#references",
    "href": "src/notebooks/quarto.html#references",
    "title": "2  Quarto",
    "section": "2.3 References",
    "text": "2.3 References\n\nQuarto Reference",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "src/notebooks/rstudio.html",
    "href": "src/notebooks/rstudio.html",
    "title": "3  RStudio",
    "section": "",
    "text": "3.1 Keyboard Shortcuts\nBelow is a set of helpful keyboard shortcut. The full list can be reached by clicking Tools -&gt; Keyboard Shortcut Help (Alt+Shift+K) -&gt; See All Shortcuts",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "src/notebooks/rstudio.html#keyboard-shortcuts",
    "href": "src/notebooks/rstudio.html#keyboard-shortcuts",
    "title": "3  RStudio",
    "section": "",
    "text": "Ctrl+Enter: run line of code on which cursor is standing\nCtrl+Alt+I: insert new code chunk\nCtrl+Shift+C: comment/un-comment\nAlt-⬆️: move line up\nAlt-⬇️️: move line down\nCtrl+D: delete line\nCtrl+Shift+A: format code\nCtrl+M: add pipe |&gt; operator–to change from %&gt;%, go to Tools -&gt; Global Options… -&gt; Code section -&gt; Editing tab -&gt; check Use native pipe operator, |&gt; (requires R 4.1+)\nCtrl++: increase font size of all windows\nCtrl+-: decrease font size of all windows\nAlt+- : insert assignment &lt;-. Notice:\n\nthe inserted assignment it is surrounded by spaces\nthe action happen when the cursor is inside an R chunk or R script file",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/_r-for-data-science.html",
    "href": "src/r-for-data-science/_r-for-data-science.html",
    "title": "R for Data Science (2e)",
    "section": "",
    "text": "This section contains replications for the examples used in the R for Data Science (2e) book, one Quarto file per chapter of the book.",
    "crumbs": [
      "R for Data Science (2e)"
    ]
  },
  {
    "objectID": "src/r-for-data-science/01-data-viz.html",
    "href": "src/r-for-data-science/01-data-viz.html",
    "title": "\n4  Data Visualization\n",
    "section": "",
    "text": "4.1 Introduction\nThis page introduces the plot creation vocabulary step by step",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/01-data-viz.html#clear-workspace",
    "href": "src/r-for-data-science/01-data-viz.html#clear-workspace",
    "title": "\n4  Data Visualization\n",
    "section": "\n4.2 Clear Workspace",
    "text": "4.2 Clear Workspace\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\nrm(list = ls())",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/01-data-viz.html#sec-packages",
    "href": "src/r-for-data-science/01-data-viz.html#sec-packages",
    "title": "\n4  Data Visualization\n",
    "section": "\n4.3 Packages",
    "text": "4.3 Packages\n\n4.3.1 List\nList all the packages that will be used in this script.\n\npackages = c(\"palmerpenguins\", 'ggthemes', 'ggplot2', 'dplyr', 'here', 'knitr')\n\n\n4.3.2 Install Missing\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n\n\n4.3.3 Load\nLoad all packages\n\n\nLoading required package: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nLoading required package: printr\n\n\nRegistered S3 method overwritten by 'printr':\n  method                from     \n  knit_print.data.frame rmarkdown\n\n\nLoading required package: here\n\n\nhere() starts at C:/Users/Amin Alhashim/Documents/GitHub/hashcx/notebooks\n\n\nLoading required package: knitr\n\n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] TRUE\n\n[[7]]\n[1] TRUE",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/01-data-viz.html#plot-creation-process",
    "href": "src/r-for-data-science/01-data-viz.html#plot-creation-process",
    "title": "\n4  Data Visualization\n",
    "section": "\n4.4 Plot Creation Process",
    "text": "4.4 Plot Creation Process\n\n4.4.1 Load Dataset\nThe penguins dataset from the palmerpenguins package will be used for plotting. Typically, the package is loaded using the library function as shown in the code chunk below. However, a better approach is the one outlined in Section 8.3.\n\nlibrary(palmerpenguins)\n\nExplore the dataset\n\nhelp(penguins)\n\nstarting httpd help server ... done\n\n\nExplore the dataset differently\n\ndplyr::glimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n4.4.2 Load Plotting Package\nThe ggplot2 package will be used for plotting. The package is typically loaded using the library function as shown in the code chunk below. However, a better approach is the one outlined in Section 8.3.\n\nlibrary(ggplot2)\n\n\n4.4.3 Create ggplot object\nCreate an empty canvas by instantiating a ggplot object using the ggplot() function.\n\nggplot()\n\n\n\n\n\n\n\n\n4.4.4 Link Dataset\nLink the dataset with the instantiated ggplot object using the data parameter.\n\nggplot(data = penguins)\n\n\n\n\n\n\n\n\n4.4.5 Map Two Variables\nSpecify which of the variables in the dataset will be used as the plot aesthetics (visual properties) using the mapping argument done via the aes() function.\n\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g))\n\n\n\n\n\n\n\n\n4.4.6 Display Data\nSpecify how the data (observations) will be represented geometrically on the plot, eg, bars, points, or line. The functions starting with geom_ is used for this purpose. These functions add layer of the selected geometric object to the plot.\n\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.7 Map Third Variables\nOther variables in the dataset can be linked to plot aesthetics (visual properties) using the mapping argument done via the aes() function.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.8 Display Three Trendlines\nMore geometric representations for the data can be specified using the functions starting with geom_ which will add layer of the selected geometric object to the plot.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.9 Display One Trendline\nThe aesthetic mapping defined in the ggplot() function is global meaning that all the geom_() functions inherit it. However, the aesthetic mapping defined in the geom_() functions are local, ie, not shared with other gemo_() functions.\n\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species)) +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.10 Map One Variable Twice\nWe can link the same variable to multiple plot aesthetics (visual properties) using the mapping parameter done via the aes() function.\n\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.11 Fix Labels\nThe labs() function can be used to make the plot more accessible. The function will add new layer to the plot and the following items can be added to the layer using the corresponding parameters\n\na title using the title parameter\na sub-title, if necessary, using the subtitle parameter\nx-axis title using the x parameter\ny-axis title using the y parameter\ndata-series label or legend using the color and/or shape parameters\n\n\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nOther types of texts can be added using other functions. The other types of texts are:\n\nx-axis label\ny-axis label\ndata labels, if necessary\nannotation for interesting or important data, if exist\n\n4.4.12 Ensure Color-blind Safe\nMake the plot more color-blind safe by using the scale_color_colorblind() function from the ggthemes package which will add new layer to the plot.\n\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.13 Can Call Implicitly\nThe first one or two arguments of functions are so important that scientists should know them by heart. Hence, to save some typing, the name of these arguments are usually omitted and only the values assigned to them are kept, ie, the names becomes implicit and no more explicit. Hence, the above call can be written as follows–the arguments data and mapping were omitted.\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n4.4.14 Use Pipe Operator\nThe pipe operator \\&gt; (shortcut: Ctrl+M) can be used to make the code tidy. The above code can be re-written as follow–notice the dataset was pulled before the call to the ggplot() function.\n\npenguins |&gt;\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/01-data-viz.html#visualizing-distribution",
    "href": "src/r-for-data-science/01-data-viz.html#visualizing-distribution",
    "title": "\n4  Data Visualization\n",
    "section": "\n4.5 Visualizing Distribution",
    "text": "4.5 Visualizing Distribution\n\n4.5.1 Categorical Variables\nPlot options to visualize how a categorical variable is distributed:\n\nbar chart, if the counts are not computed, using gemo_bar() function\ncolumn chart, if the counts are computed, gemo_col() function\n\n4.5.2 Numerical Variables\nPlot options to visualize how a numerical (discrete or continuous) variable is distributed:\n\nhistogram, using geom_histogram() function\n\n\n\n\n\n\n\nHistogram Bin Width\n\n\n\nThe bin width of the histogram is in the unit of the variable mapped to the plot x (or y) aesthetic (visual property)\n\n\n\ndensity plot, using geom_density() function\nboxplot, using geom_boplot() function\n\n\n\n\n\n\n\nBoxplot Components\n\n\n\nAs described beautifully in R4DS, a boxplot consists of:\n\nA box that describes the range of the middle half of the data, a distance known as the interquartile range (IQR), stretching from the 25th percentile of the distribution to the 75th percentile.\nA line in the middle of the box displaying the median, ie, the 50th percentile, of the distribution.\nThe box and the line give sense of the spread of the distribution and whether or not the distribution is symmetric about the median or skewed to one side\nVisual points that display the observations that fall more than 1.5 time the IQR from either edge of the box. These outlying points (hence called outliers) are unusual so are plotted individually\nA whisker that extend from each end of the box and goes to the farthest non-outlier point in the distribution\n\nBelow is the diagram from R4DS showing the above components and how the boxpot is created.\n\n\n\n\n\n\n\nFigure 4.1: Boxplot Components (taken from R4DS)",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/01-data-viz.html#visualizing-relationships",
    "href": "src/r-for-data-science/01-data-viz.html#visualizing-relationships",
    "title": "\n4  Data Visualization\n",
    "section": "\n4.6 Visualizing Relationships",
    "text": "4.6 Visualizing Relationships\n\n4.6.1 One Categorical + One Numerical\nFor each category of the categorical variable, We can use any of the plot options mentioned above for the numerical variables\n\n4.6.2 Two Categoricals\nEach category of one of the categorical variables will be placed on the x-axis (or the y-axis) by mapping it to the plot x (or y) aesthetic (visual property) of the geom_bar() and the distribution of the categories of the other categorical variables by mapping it to the plot fill aesthetic (visual property). The second variable can be shown as:\n\npure counts (stacked bar chart), or\npercentages (percent stack bar chart) by setting the position attribute of the geom_bar() to fill.\n\n4.6.3 Two Numerical\nPlot options to show the relationship between two numerical variables are:\n\nScatter plot using the geom_point() function\ntrend line using geom_smooth() function\nline graph using geom_line() function if one of the variables is monotonic, eg, time or date.\n\n4.6.4 Three or More Variables\nTo visualize 3+ variables, We can either\n\nmap variables to other aesthetics of the plot, eg, color, size, and shape\n\nsplit plot into facets, subplots that each display one subset of the data, based on a categorical variable using facet_wrap() function where its first argument is a formula created using ~ followed by a (categorical) variable name.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/02-workflow-basics.html",
    "href": "src/r-for-data-science/02-workflow-basics.html",
    "title": "\n5  Workflow: Basics\n",
    "section": "",
    "text": "5.1 Introduction\nThis page covers basic concepts when working with R. I took note for those that were new to me or found useful to remind myself with.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Workflow: Basics</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/02-workflow-basics.html#clear-workspace",
    "href": "src/r-for-data-science/02-workflow-basics.html#clear-workspace",
    "title": "\n5  Workflow: Basics\n",
    "section": "\n5.2 Clear Workspace",
    "text": "5.2 Clear Workspace\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\nrm(list = ls())",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Workflow: Basics</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/02-workflow-basics.html#sec-packages",
    "href": "src/r-for-data-science/02-workflow-basics.html#sec-packages",
    "title": "\n5  Workflow: Basics\n",
    "section": "\n5.3 Packages",
    "text": "5.3 Packages\n\n5.3.1 List\nList all the packages that will be used in this script.\n\npackages = c()\n\n\n5.3.2 Install Missing\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n\n\n5.3.3 Load\nLoad all packages\n\n\nlist()",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Workflow: Basics</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/02-workflow-basics.html#comments",
    "href": "src/r-for-data-science/02-workflow-basics.html#comments",
    "title": "\n5  Workflow: Basics\n",
    "section": "\n5.4 Comments",
    "text": "5.4 Comments\nUse comments to explain the why of your code, eg, you changed the default value of a parameter of a function from say .2 to .9, why?",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Workflow: Basics</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/02-workflow-basics.html#nameing-objects-rules",
    "href": "src/r-for-data-science/02-workflow-basics.html#nameing-objects-rules",
    "title": "\n5  Workflow: Basics\n",
    "section": "\n5.5 Nameing Objects Rules",
    "text": "5.5 Nameing Objects Rules\n\nAllowed characters when naming objects\n\nletters\nnumbers\n_\n.\n\n\nAll names must start with a letter\nR is case-sensitive, ie, var, Var, and VAR are different names",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Workflow: Basics</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/03-data-trans.html",
    "href": "src/r-for-data-science/03-data-trans.html",
    "title": "\n6  Data Transformation\n",
    "section": "",
    "text": "6.1 Introduction\nThis page introduces the dplyr package used to transform data such as creating new variables, editing existing variables, filtering out observations, and creating summaries.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Transformation</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/03-data-trans.html#clear-workspace",
    "href": "src/r-for-data-science/03-data-trans.html#clear-workspace",
    "title": "\n6  Data Transformation\n",
    "section": "\n6.2 Clear Workspace",
    "text": "6.2 Clear Workspace\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\nrm(list = ls())",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Transformation</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/03-data-trans.html#sec-packages",
    "href": "src/r-for-data-science/03-data-trans.html#sec-packages",
    "title": "\n6  Data Transformation\n",
    "section": "\n6.3 Packages",
    "text": "6.3 Packages\n\n6.3.1 List\nList all the packages that will be used in this script.\n\npackages = c(\"nycflights13\", \"ggplot2\", \"dplyr\")\n\n\n6.3.2 Install Missing\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n\nInstalling package into 'C:/Users/Amin Alhashim/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\n\n\n6.3.3 Load\nLoad all packages\n\n\nLoading required package: nycflights13\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'nycflights13'\n\n\nLoading required package: ggplot2\n\n\n[[1]]\n[1] FALSE\n\n[[2]]\n[1] TRUE",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Transformation</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/03-data-trans.html#dplyr-functions-verbs",
    "href": "src/r-for-data-science/03-data-trans.html#dplyr-functions-verbs",
    "title": "\n6  Data Transformation\n",
    "section": "\n6.4 dplyr Functions (Verbs)",
    "text": "6.4 dplyr Functions (Verbs)\n\n6.4.1 Four Groups\ndplyr functions (verbs) can be grouped into functions that work on:\n\nrows, eg, filter(), arrange(), distinct(), count()\n\ncolumns, eg, mutate(), select(), rename(), relocate()\n\ngroups, eg, summarize(), slice_max, group_by, ungroup(), .by\n\ntables\n\n6.4.2 Common Characteristics\nAll the functions have the followings in common:\n\ntheir first argument is always a data frame\ntheir subsequent arguments typically describe which columns to operate on using variable names without quotes\n\nthey always output a new data frame, they don’t modify the passed one\n\n6.4.3 Pipe |&gt; Operator\n\nThe pipe |&gt; operator takes what on its left and pass it to the function on its right so that x |&gt; f(y) (pronounced as x then f(y)) is equivalent to f(x, y) and x |&gt; f(y) |&gt; g(z) (pronounced as x then f(y) then g(z)) is equivalent to g(f(x, y), z)\n\nThe base R pipe operator |&gt; was introduced in R 4.1.0 in 2021 while the tidyverse magrittr pipe operator %&gt;% was introduced in 2014. Using |&gt; instead of %&gt;% makes our code run when we don’t use tidyverse\n\n6.4.4 Row Functions\n\nThe following filter() statements are equivalent:\n\nfilter(ds, var == 1 or var == 2)\nfilter(ds, var == 1 | var == 2)\nfilter(ds, var %in% c(1,2))\n\n\nThe following filter() statements are equivalent:\n\nfilter(ds, var == 1 and var == 2)\nfilter(ds, var == 1, var == 2)\n\n\nThe following arrange() statements order data differently\n\n\narrange(ds, var) ascendant order\n\narrange(ds, desc(var)) decedent order\n\n\nThe following distinct() statements return different data frames\n\n\ndistinct(ds, var1, var2) only keep columns var1 and var2\n\n\ndistinct(ds, var1, var2, .keep_all = TRUE) keep all the columns–find the first observation where var1 and var2 are distinct and discard the rest\n\n\nThe following count() statements order the results differently\n\n\ncount(ds, var1, var2) arrange results in order they are encountered\n\ncount(ds, var1, var2, sort = TRUE) arrange results in descending order of number of occurrence\n\n\n\n6.4.5 Column Functions\n\n\nmutate()\n\nInstead of adding the newly created variable to the right hand side of the data frame, we can instruct mutate() to adding before a variable using the .before attribute or after a variable using the .after attribute\nTo only keep the variables involved in the creation of the new variables, we can instruct mutate() to do so by setting the .keep = \"used\" attribute\n\n\n\nselect()\n\nselect range of variables: select(ds, var_x:var_y)\n\nselect all variables except certain range: select(ds, !var_x:var_y)\n\nselect character variables only: select(ds, where(is.character))\n\nselect variables whose name start with something: select(ds, start_with(\"m\"))\n\nselect variables whose name end with something: select(ds, end_with(\"m\"))\n\nselect variables whose name contain something: select(ds, contains(\"m\"))\n\nselect variables whose name follow some range: select(ds, num_range(\"x\", 1:3))\n\nselect and rename variable: select(ds, var1_new = var1, var2_new = var2)\n\n\n\n\nrename()\n\nto rename many columns, it is better to use janitor::clean_names() function\n\n\n\nrelocate()\n\nBy default, bring columns to left hand side of the data frame\n\nrelocate(ds, var1, .after = var2) puts var1 after var2\n\n\nrelocate(ds, var1, .before = var2) puts var1 before var2\n\n\n\n\n6.4.6 Groups Functions\n\n\ngroup_by()\n\ndivides the data into groups so that subsequent operations work on these groups\nit added a class to the dataset to indicate the grouping\n\n\n\nsummarize() or summarise()\n\nTo prevent summary statistics functions, eg, mean() to give NA due to some groups has NA (missing) values, set their argument: na.rm = TRUE\n\nThe summary statistics function n() gives the number of observations in the group\nEach summary peels off the last group. To prevent this behavior, change the default value drop_last of the .groups argument of the summary statistic function to either keep to keep all groups or drop to drop all groups\n\n\n\n`slice_` functions\n\nThe functions are: slice_head(), slice_tail(), slice_min(), slice_max(), and slice_sample()\n\nTo slice a number of rows from each group, use the n arguments, eg, n = 1\n\nTo slice percentage of rows from each group, use the prop argument, eg, prop = .1 (10%)\nTo prevent ties from showing, use with_ties = FALSE argument\n\n\n\n`.by` argument\n\nNew addition to dplyr 1.1.0 (more information at dplyr 1.1.0 blog post)\nPer-operation grouping–can be used all verbs. The advantage is that we don’t need to use the .groups argument to suppress the warning message raised by summarize() when grouping by multiple variables and we don’t need to use ungroup() when done with our summary.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Transformation</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/04-workflow-code-style.html",
    "href": "src/r-for-data-science/04-workflow-code-style.html",
    "title": "\n7  Workflow: Code Style\n",
    "section": "",
    "text": "7.1 Introduction\nThis page covers code style concepts when working with R. I took note for those that were new to me or found useful to remind myself with.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Workflow: Code Style</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/04-workflow-code-style.html#introduction",
    "href": "src/r-for-data-science/04-workflow-code-style.html#introduction",
    "title": "\n7  Workflow: Code Style\n",
    "section": "",
    "text": "Code Style & Punctuation\n\n\n\nCode style is like punctuation, when used correctly, itmakecodereadeasily.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Workflow: Code Style</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/04-workflow-code-style.html#clear-workspace",
    "href": "src/r-for-data-science/04-workflow-code-style.html#clear-workspace",
    "title": "\n7  Workflow: Code Style\n",
    "section": "\n7.2 Clear Workspace",
    "text": "7.2 Clear Workspace\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\nrm(list = ls())",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Workflow: Code Style</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/04-workflow-code-style.html#sec-packages",
    "href": "src/r-for-data-science/04-workflow-code-style.html#sec-packages",
    "title": "\n7  Workflow: Code Style\n",
    "section": "\n7.3 Packages",
    "text": "7.3 Packages\n\n7.3.1 List\nList all the packages that will be used in this script.\n\npackages &lt;- c(\"styler\")\n\n\n7.3.2 Install Missing\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n\n\n7.3.3 Load\nLoad all packages\n\n\nLoading required package: styler\n\n\n[[1]]\n[1] TRUE",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Workflow: Code Style</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/04-workflow-code-style.html#styling-overview",
    "href": "src/r-for-data-science/04-workflow-code-style.html#styling-overview",
    "title": "\n7  Workflow: Code Style\n",
    "section": "\n7.4 Styling Overview",
    "text": "7.4 Styling Overview\n\n7.4.1 Consistency\nAlthough there are styling guidelines (see below for example) that one can follow, it is important that a programmer pick one and stick with it to make easy for other including future self to read your work.\n\n7.4.2 Guidelines\nThere is not official styling guideline for R. However, there are different styling guidelines that one can adopt, below are some of those found by search R styling guidelines (html):\n\ntidyverse Style Guide (html) by Hadley Wickham. This is the adopted guidelines in these notes.\n\nR Style Guide (html) by Google\nR Coding Conventions (html) by Henrik Bengtsson, Assoc Professor, Dept of Statistics, University of California, Berkeley\nCoding Style (html) by Bioconductor project (website)\nR Style Guide (html) by Jean Fan (GitHub), Assistant Professor, Center for Computational Biology, Department of Biomedical Engineering, Johns Hopkins University\n\n7.4.3 Automatic\nThere are package that can be used to automatically style existing code. Below are some of those:\n\n\nstyler package (website) by Lorenz Walthert (website). After installing the package, launch RStudio’s command palette using the keyboard shortcut Ctrl+Shift+P, type styler, and select from the available commands",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Workflow: Code Style</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/04-workflow-code-style.html#styling-specifics",
    "href": "src/r-for-data-science/04-workflow-code-style.html#styling-specifics",
    "title": "\n7  Workflow: Code Style\n",
    "section": "\n7.5 Styling Specifics",
    "text": "7.5 Styling Specifics\n\n7.5.1 Names\n\nUse meaningful names\nsnake_case is used to separate_multi_word_variables\nvariables with certain theme should start with the same common word/letter to make use of the auto-complete functionality\n\n7.5.2 Spaces\n\nExcept ^, put spaces on both sides of mathematical operators\nPut spaces on both sides of the assignment operator, &lt;-\n\n\n\n# Strive for\nz &lt;- (a + b)^2 / d\n\n# Avoid\nz&lt;-( a + b ) ^ 2/d\n\n\nDon’t put spaces inside or outside parentheses for regular function calls\nAlways put a space after a comma\n\n\n# Strive for\nmean(x, na.rm = TRUE)\n\n# Avoid\nmean (x ,na.rm=TRUE)\n\n\nIt is okay to use extra space so align things.\n\n\nflights |&gt; \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n\n\n7.5.3 Pipes |&gt;\n\nThe roles for pipes are nicely summarized in R4DS. Most of them are copied below.\n\nPut a space before it\nIt should typically the last thing on a line. This make it easy to\n\nadd new steps\nrearrange existing steps\nmodify elements within a step\nquickly skip the verbs on the left-hand side\n\n\nAfter the first step of the pipeline, indent each line by two spaces\n\n\n# Strive for \nflights |&gt;  \n  filter(!is.na(arr_delay), !is.na(tailnum)) |&gt; \n  count(dest)\n\n# Avoid\nflights|&gt;filter(!is.na(arr_delay), !is.na(tailnum))|&gt;count(dest)\n\n\nIf piping to a function without named arguments and its arguments fit on one line,\n\nput all of them on one line.\n\n\nIf piping to a function with named arguments OR the function has not named arguments but the arguments do not fit on line,\n\nput each argument on new line indented by two spaces\nmake sure the ) is on its own line and un-indented to match the horizontal position of the function name\n\n\n\n\n# Strive for\nflights |&gt;  \n  group_by(tailnum) |&gt; \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# Avoid\nflights |&gt;\n  group_by(\n    tailnum\n  ) |&gt; \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())\n\n# Avoid\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n             delay = mean(arr_delay, na.rm = TRUE), \n             n = n()\n           )\n\n# Avoid\nflights|&gt;\n  group_by(tailnum) |&gt; \n  summarize(\n  delay = mean(arr_delay, na.rm = TRUE), \n  n = n()\n  )\n\n\n\n\n\n\n\nLong Pipeline\n\n\n\nBreak long pipelines (tasks) to meaningful pipelines (sub-tasks) and save the intermediate steps. This will make the code more readable and easy to check and debug.\n\n\n\n7.5.4 ggplot2\n\nThe same rules from pipe can be applied to ggplot2.\n\nflights |&gt; \n  group_by(dest) |&gt; \n  summarize(\n    distance = mean(distance),\n    speed = mean(distance / air_time, na.rm = TRUE)\n  ) |&gt; \n  ggplot(aes(x = distance, y = speed)) +\n  geom_smooth(\n    method = \"loess\",\n    span = 0.5,\n    se = FALSE, \n    color = \"white\", \n    linewidth = 4\n  ) +\n  geom_point()\n\n\n7.5.5 Sectioning Comments\nWhen writing long scripts, it is advisable to break the code into sections and using sectioning comments to label them. The RStudio keyboard shortcut to create such comment is Cnrl+Shift+R.\n\n# Load data --------------------------------------\n\n# Plot data --------------------------------------",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Workflow: Code Style</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/05-data-tidying.html",
    "href": "src/r-for-data-science/05-data-tidying.html",
    "title": "\n8  Data Tidying\n",
    "section": "",
    "text": "8.1 Introduction\nThis page explains how use the tidyr package to put data in tidy form where:\nPutting data in tidy form will make it easy to process using tidyverse packages.",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Tidying</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/05-data-tidying.html#introduction",
    "href": "src/r-for-data-science/05-data-tidying.html#introduction",
    "title": "\n8  Data Tidying\n",
    "section": "",
    "text": "each row represents an observation\neach column represents a variable\neach cell contain a single value",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Tidying</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/05-data-tidying.html#clear-workspace",
    "href": "src/r-for-data-science/05-data-tidying.html#clear-workspace",
    "title": "\n8  Data Tidying\n",
    "section": "\n8.2 Clear Workspace",
    "text": "8.2 Clear Workspace\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\nrm(list = ls())",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Tidying</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/05-data-tidying.html#sec-packages",
    "href": "src/r-for-data-science/05-data-tidying.html#sec-packages",
    "title": "\n8  Data Tidying\n",
    "section": "\n8.3 Packages",
    "text": "8.3 Packages\n\n8.3.1 List\nList all the packages that will be used in this script.\n\npackages &lt;- c(\"styler\", \"dplyr\", \"tidyr\")\n\n\n8.3.2 Install Missing\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n\n\n8.3.3 Load\nLoad all packages\n\n\nLoading required package: styler\n\n\nLoading required package: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nLoading required package: tidyr\n\n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Tidying</span>"
    ]
  },
  {
    "objectID": "src/r-for-data-science/05-data-tidying.html#lengthening-data-pivot_longer",
    "href": "src/r-for-data-science/05-data-tidying.html#lengthening-data-pivot_longer",
    "title": "\n8  Data Tidying\n",
    "section": "\n8.4 Lengthening Data, pivot_longer\n",
    "text": "8.4 Lengthening Data, pivot_longer\n\n\n8.4.1 One Variable in Column Headers\n\n8.4.1.1 Toy Example\n\nds &lt;- tribble(\n  ~id, ~A, ~B_1, ~B_2,\n  \"A\", 1, 10.1, 10.2,\n  \"B\", 2, 20.1, NA,\n  \"C\", 3, NA, 30.2\n)\n\nds\n\n# A tibble: 3 × 4\n  id        A   B_1   B_2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A         1  10.1  10.2\n2 B         2  20.1  NA  \n3 C         3  NA    30.2\n\n\n\n8.4.1.2 Lengthen\n\nI want the values in all the columns that start with B_ to be placed into a (single) column named value. To distinguish which value belong to which column, create a new column called B_type for this purpuse.\n\n\nds_lengthen &lt;- ds |&gt; \n  pivot_longer(\n    cols = starts_with(\"B_\"),\n    names_to = \"B_type\",\n    values_to = \"value\"\n  )\n\nds_lengthen\n\n# A tibble: 6 × 4\n  id        A B_type value\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 A         1 B_1     10.1\n2 A         1 B_2     10.2\n3 B         2 B_1     20.1\n4 B         2 B_2     NA  \n5 C         3 B_1     NA  \n6 C         3 B_2     30.2\n\n\n\n8.4.1.3 Remove NA\nUse the argument values_drop_na = TRUE\n\nds_lengthen &lt;- ds |&gt; \n  pivot_longer(\n    cols = starts_with(\"B_\"),\n    names_to = \"B_type\",\n    values_to = \"value\",\n    values_drop_na = TRUE\n  )\n\nds_lengthen\n\n# A tibble: 4 × 4\n  id        A B_type value\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 A         1 B_1     10.1\n2 A         1 B_2     10.2\n3 B         2 B_1     20.1\n4 C         3 B_2     30.2\n\n\n\n8.4.1.4 Fix Cell Values\nUse the readr::parse_number() function to extract the first number from var2 variable and ignore all other text.\n\nds_lengthen &lt;- ds |&gt; \n  pivot_longer(\n    cols = starts_with(\"B_\"),\n    names_to = \"B_type\",\n    values_to = \"value\",\n    values_drop_na = TRUE\n  ) |&gt; \n  mutate(\n    B_type = readr::parse_number(B_type)\n  )\n\nds_lengthen\n\n# A tibble: 4 × 4\n  id        A B_type value\n  &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 A         1      1  10.1\n2 A         1      2  10.2\n3 B         2      1  20.1\n4 C         3      2  30.2\n\n\n\n8.4.2 Multiple Variables in Column Headers\n\n8.4.2.1 Toy Example\n\nds2 &lt;- tribble(\n  ~id, ~A, ~B1_C1, ~B1_C2, ~B2_C1, ~B2_C2,\n  \"A\", 1, 10.11, 10.12, 10.21, 10.22,\n  \"B\", 2, 20.11, 20.12, NA, 20.22,\n  \"C\", 3, 30.11, NA, 30.21, 30.22\n)\n\nds2\n\n# A tibble: 3 × 6\n  id        A B1_C1 B1_C2 B2_C1 B2_C2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A         1  10.1  10.1  10.2  10.2\n2 B         2  20.1  20.1  NA    20.2\n3 C         3  30.1  NA    30.2  30.2\n\n\n\n8.4.2.2 Lengthening w/o Seperating Variables\n\nds_lengthen &lt;- ds2 |&gt; \n  pivot_longer(\n    cols = starts_with(\"B\"),\n    names_to = \"B_C\",\n    values_to = \"value\"\n  )\n\nds_lengthen\n\n# A tibble: 12 × 4\n   id        A B_C   value\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 A         1 B1_C1  10.1\n 2 A         1 B1_C2  10.1\n 3 A         1 B2_C1  10.2\n 4 A         1 B2_C2  10.2\n 5 B         2 B1_C1  20.1\n 6 B         2 B1_C2  20.1\n 7 B         2 B2_C1  NA  \n 8 B         2 B2_C2  20.2\n 9 C         3 B1_C1  30.1\n10 C         3 B1_C2  NA  \n11 C         3 B2_C1  30.2\n12 C         3 B2_C2  30.2\n\n\n\n8.4.2.3 Lengthening w/ Seperating Variables\n\nds_lengthen &lt;- ds2 |&gt; \n  pivot_longer(\n    cols = !(id:A),\n    names_sep = \"_\",\n    names_to = c(\"B\", \"C\"),\n    values_to = \"value\"\n  )\n\nds_lengthen\n\n# A tibble: 12 × 5\n   id        A B     C     value\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 A         1 B1    C1     10.1\n 2 A         1 B1    C2     10.1\n 3 A         1 B2    C1     10.2\n 4 A         1 B2    C2     10.2\n 5 B         2 B1    C1     20.1\n 6 B         2 B1    C2     20.1\n 7 B         2 B2    C1     NA  \n 8 B         2 B2    C2     20.2\n 9 C         3 B1    C1     30.1\n10 C         3 B1    C2     NA  \n11 C         3 B2    C1     30.2\n12 C         3 B2    C2     30.2\n\n\n\n8.4.2.4 Dropping NA\n\nds_lengthen &lt;- ds2 |&gt; \n  pivot_longer(\n    cols = !(id:A),\n    names_sep = \"_\",\n    names_to = c(\"B\", \"C\"),\n    values_to = \"value\",\n    values_drop_na = TRUE\n  )\n\nds_lengthen\n\n# A tibble: 10 × 5\n   id        A B     C     value\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 A         1 B1    C1     10.1\n 2 A         1 B1    C2     10.1\n 3 A         1 B2    C1     10.2\n 4 A         1 B2    C2     10.2\n 5 B         2 B1    C1     20.1\n 6 B         2 B1    C2     20.1\n 7 B         2 B2    C2     20.2\n 8 C         3 B1    C1     30.1\n 9 C         3 B2    C1     30.2\n10 C         3 B2    C2     30.2\n\n\n\n8.4.3 Data and Variable Names in Colmnn Headers\n\n8.4.3.1 Toy Example\n\nds3 &lt;- tribble(\n  ~id, ~child1_name, ~child1_age, ~child2_name, ~child2_age,\n  \"A\", \"A1\", 11, \"A2\", 12,\n  \"B\", \"B1\", 21, NA, NA,\n  \"C\", NA, NA, \"C2\", 32\n)\n\nds3\n\n# A tibble: 3 × 5\n  id    child1_name child1_age child2_name child2_age\n  &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1 A     A1                  11 A2                  12\n2 B     B1                  21 &lt;NA&gt;                NA\n3 C     &lt;NA&gt;                NA C2                  32\n\n\n\n8.4.3.2 Lengthening w/o Removing NA\n\nds_lengthen &lt;- ds3 |&gt; \n  pivot_longer(\n    cols = starts_with(\"child\"),\n    names_sep = \"_\",\n    names_to = c(\"child\", \".value\")\n  )\n\nds_lengthen\n\n# A tibble: 6 × 4\n  id    child  name    age\n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n1 A     child1 A1       11\n2 A     child2 A2       12\n3 B     child1 B1       21\n4 B     child2 &lt;NA&gt;     NA\n5 C     child1 &lt;NA&gt;     NA\n6 C     child2 C2       32\n\n\n\n8.4.3.3 Lengthening w Removing NA\n\nds_lengthen &lt;- ds3 |&gt; \n  pivot_longer(\n    cols = starts_with(\"child\"),\n    names_sep = \"_\",\n    names_to = c(\"child\", \".value\"),\n    values_drop_na = TRUE\n  )\n\nds_lengthen\n\n# A tibble: 4 × 4\n  id    child  name    age\n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n1 A     child1 A1       11\n2 A     child2 A2       12\n3 B     child1 B1       21\n4 C     child2 C2       32\n\n\n\n8.4.3.4 Fixing Cell Values\n\nds_lengthen &lt;- ds3 |&gt; \n  pivot_longer(\n    cols = starts_with(\"child\"),\n    names_sep = \"_\",\n    names_to = c(\"child\", \".value\"),\n    values_drop_na = TRUE\n  ) |&gt; \n  mutate(\n    child = readr::parse_number(child)\n  )\n\nds_lengthen\n\n# A tibble: 4 × 4\n  id    child name    age\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;\n1 A         1 A1       11\n2 A         2 A2       12\n3 B         1 B1       21\n4 C         2 C2       32",
    "crumbs": [
      "R for Data Science (2e)",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Data Tidying</span>"
    ]
  },
  {
    "objectID": "src/practice/_practice.html",
    "href": "src/practice/_practice.html",
    "title": "Practice",
    "section": "",
    "text": "This section contains practices for the programming/scripting languages that I am learning.",
    "crumbs": [
      "Practice"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html",
    "href": "src/practice/topic-modeling-r.html",
    "title": "\n9  Topic Modeling in R\n",
    "section": "",
    "text": "9.1 Introduction\nAn attempt to understand Sherlock Holmes short stories found in Adventures of Sherlock Holmes book by Arthur Conan Doyle. After inspecting the table of content, the book seems to have 12 stories, one story per chapter. The analysis is inspired by Julia Silge’s YouTube video Topic modeling with R and tidy data principles",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#download-book",
    "href": "src/practice/topic-modeling-r.html#download-book",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.2 Download Book",
    "text": "9.2 Download Book\n\nlibrary(gutenbergr)  # download books from Project Gutenberg using book ID\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidytext)\n\n# Download the book, each line of the book is read into a seperate row\nsherlock_raw &lt;- gutenberg_download(48320)\n\nDetermining mirror for Project Gutenberg from https://www.gutenberg.org/robot/harvest\nUsing mirror http://aleph.gutenberg.org\n\ndim(sherlock_raw)\n\n[1] 12350     2\n\nhead(sherlock_raw)\n\n# A tibble: 6 × 2\n  gutenberg_id text                           \n         &lt;int&gt; &lt;chr&gt;                          \n1        48320 \"ADVENTURES OF SHERLOCK HOLMES\"\n2        48320 \"\"                             \n3        48320 \"\"                             \n4        48320 \"\"                             \n5        48320 \"\"                             \n6        48320 \"[Illustration:\"               \n\ntail(sherlock_raw)\n\n# A tibble: 6 × 2\n  gutenberg_id text                                                  \n         &lt;int&gt; &lt;chr&gt;                                                 \n1        48320 \"  boisterious fashion, and on the whole _changed to_\"\n2        48320 \"  boisterous fashion, and on the whole\"              \n3        48320 \"\"                                                    \n4        48320 \"  Page 297\"                                          \n5        48320 \"  wrapt in the peaceful beauty _changed to_\"         \n6        48320 \"  rapt in the peaceful beauty\"",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#wrangle-label-stories",
    "href": "src/practice/topic-modeling-r.html#wrangle-label-stories",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.3 Wrangle: Label Stories",
    "text": "9.3 Wrangle: Label Stories\n\nsherlock &lt;- sherlock_raw %&gt;% \n  \n  # determine start of each story/chapter\n  mutate(story = ifelse(str_detect(text, \"^(A SCANDAL IN BOHEMIA|THE RED-HEADED LEAGUE|A CASE OF IDENTITY|THE BOSCOMBE VALLEY MYSTERY|THE FIVE ORANGE PIPS|THE MAN WITH THE TWISTED LIP|THE ADVENTURE OF THE BLUE CARBUNCLE|THE ADVENTURE OF THE SPECKLED BAND|THE ADVENTURE OF THE ENGINEER’S THUMB|THE ADVENTURE OF THE NOBLE BACHELOR|THE ADVENTURE OF THE BERYL CORONET|THE ADVENTURE OF THE COPPER BEECHES)$\"), text, NA)) %&gt;%\n  \n  # determine lines belonging to each story/chapter by\n  # filling down the N/A rows of story column\n  fill(story) %&gt;%\n  \n  # remove the part that does not belong to any story/chapter,\n  # i.e, the introduction\n  filter(!is.na(story)) %&gt;%\n  \n  # convert story column to factor\n  mutate(story = factor(story))",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#wrangle-put-in-tidy-format",
    "href": "src/practice/topic-modeling-r.html#wrangle-put-in-tidy-format",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.4 Wrangle: Put in Tidy Format",
    "text": "9.4 Wrangle: Put in Tidy Format\nThe row of text column contains multiple words/tokens. We want to put each word/token of each text row into a separate row. This makes the dataframe follows the tidy format and hence makes it easy to process.\n\ntidy_sherlock &lt;- sherlock %&gt;%\n  \n  # number the rows\n  mutate(line = row_number()) %&gt;% \n  \n  # break the text column into multiple row where each row contain one token\n  unnest_tokens(word, text) %&gt;% \n  \n  # remove the stopwords--the rows where the word column is a stopword\n  anti_join(stop_words) %&gt;% \n  \n  # remove holmes rows which might affect our topic models\n  filter(word != \"holmes\")\n\nJoining with `by = join_by(word)`",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#explore-tf-idf",
    "href": "src/practice/topic-modeling-r.html#explore-tf-idf",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.5 Explore tf-idf",
    "text": "9.5 Explore tf-idf\n\nTo see which words are important in each story/chapter, i.e.,the words that appears many times in that story but few or none in the other stories.\ntf-idf (term frequency-inverse document frequency) is a great exploratory tool before starting with topic modeling\n\n\nlibrary(ggplot2)\n\ntidy_sherlock %&gt;% \n  \n  # count number of occurrence of words in stories\n  count(story, word, sort = TRUE) %&gt;% \n  \n  # compute and add tf, idf, and tf_idf values for words\n  bind_tf_idf(word, story, n) %&gt;% \n  \n  # group by story\n  group_by(story) %&gt;% \n  \n  # take top 10 words of each story with highest tf_idf (last column)\n  top_n(10) %&gt;% \n  \n  # unpack\n  ungroup() %&gt;% \n  \n  # turn words into factors and order them based on their tf_idf values\n  # NOTE: This will not affect order the dataframe rows which is can be\n  #   done via the arrange function\n  # NOTE: Recording the word column this way is for ggplot to visualize them\n  #   as desired from top tf_idf to lowest\n  mutate(word = reorder(word, tf_idf)) %&gt;% \n  \n  # plot\n  ggplot(aes(word, tf_idf, fill = story)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~story, scales = \"free\", ncol = 3) +\n  theme(strip.text.x = element_text(size = 5)) +\n  coord_flip()\n\nSelecting by tf_idf",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#implement-topic-modeling",
    "href": "src/practice/topic-modeling-r.html#implement-topic-modeling",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.6 Implement Topic Modeling",
    "text": "9.6 Implement Topic Modeling\nTraining the model for the topics\n\nlibrary(stm)        # for do topic modeling\n\nstm v1.3.7 successfully loaded. See ?stm for help. \n Papers, resources, and other materials at structuraltopicmodel.com\n\nlibrary(quanteda)   # great text mining, will be used to structure the input\n\nPackage version: 4.0.2\nUnicode version: 15.1\nICU version: 74.1\n\n\nParallel computing: 8 of 8 threads used.\n\n\nSee https://quanteda.io for tutorials and examples.\n\n                    #   to stm\n\n# Convert from tidy form to quanteda form (document x term matrix)\nsherlock_stm &lt;- tidy_sherlock %&gt;% \n  count(story, word, sort = TRUE) %&gt;% \n  cast_dfm(story, word, n)\n\n# Train the model\ntopic_model &lt;- stm(sherlock_stm, K=6, init.type = \"Spectral\")\n\nBeginning Spectral Initialization \n     Calculating the gram matrix...\n     Finding anchor words...\n    ......\n     Recovering initialization...\n    .............................................................................\nInitialization complete.\n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 1 (approx. per word bound = -7.785) \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 2 (approx. per word bound = -7.593, relative change = 2.458e-02) \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 3 (approx. per word bound = -7.481, relative change = 1.473e-02) \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 4 (approx. per word bound = -7.455, relative change = 3.469e-03) \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 5 (approx. per word bound = -7.450, relative change = 7.612e-04) \nTopic 1: st, simon, lord, day, lady \n Topic 2: door, miss, house, rucastle, matter \n Topic 3: hat, goose, stone, bird, geese \n Topic 4: father, time, mccarthy, son, hand \n Topic 5: house, time, night, door, heard \n Topic 6: red, time, wilson, business, headed \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 6 (approx. per word bound = -7.449, relative change = 1.233e-04) \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nCompleting Iteration 7 (approx. per word bound = -7.449, relative change = 1.168e-05) \n............\nCompleted E-Step (0 seconds). \nCompleted M-Step. \nModel Converged \n\n\n\nsummary(topic_model)\n\nA topic model with 6 topics, 12 documents and a 7709 word dictionary.\n\n\nTopic 1 Top Words:\n     Highest Prob: st, simon, lord, day, lady, found, matter \n     FREX: simon, clair, neville, lascar, opium, doran, flora \n     Lift: aloysius, ceremony, doran, millar, 2_s, aberdeen, absurdly \n     Score: simon, st, clair, neville, _danseuse_, lestrade, doran \nTopic 2 Top Words:\n     Highest Prob: door, miss, house, rucastle, matter, street, lady \n     FREX: rucastle, hosmer, hunter, angel, windibank, _changed, 1 \n     Lift: advertised, angel, annoyance, brothers, employed, factor, fowler \n     Score: rucastle, hosmer, angel, windibank, hunter, type, 1 \nTopic 3 Top Words:\n     Highest Prob: hat, goose, stone, bird, geese, baker, sir \n     FREX: geese, horner, ryder, henry, peterson, salesman, countess \n     Lift: battered, bet, bred, brixton, cosmopolitan, covent, cream \n     Score: goose, geese, horner, _alias_, ryder, henry, peterson \nTopic 4 Top Words:\n     Highest Prob: father, time, mccarthy, son, hand, lestrade, left \n     FREX: mccarthy, pool, boscombe, openshaw, pips, horsham, turner \n     Lift: bone, dundee, horsham, pondicherry, presumption, savannah, sundial \n     Score: mccarthy, pool, lestrade, boscombe, openshaw, _détour_, turner \nTopic 5 Top Words:\n     Highest Prob: house, time, night, door, heard, hand, round \n     FREX: coronet, stoner, arthur, roylott, ventilator, gems, stoke \n     Lift: _absolute_, _all_, _en, 1100, 16a, 3d, 4000 \n     Score: coronet, arthur, stoner, gems, 4000, roylott, ventilator \nTopic 6 Top Words:\n     Highest Prob: red, time, wilson, business, headed, day, league \n     FREX: wilson, league, merryweather, jones, coburg, jabez, headed \n     Lift: daring, saturday, vincent, _employé_, _october, _partie, 17 \n     Score: wilson, league, merryweather, _employé_, jones, headed, coburg",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#contribution-of-words-in-topics",
    "href": "src/practice/topic-modeling-r.html#contribution-of-words-in-topics",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.7 Contribution of Words in Topics",
    "text": "9.7 Contribution of Words in Topics\nLooking at which words contribute the most in each topic.\n\n# Extracting betas and putting them in a tidy format\ntm_beta &lt;- tidy(topic_model)\n\n# Visualizing the top words contributing to each topic\ntm_beta %&gt;% \n  group_by(topic) %&gt;% \n  # top 10 word in each topic with higest beta (last column)\n  top_n(10) %&gt;% \n  ungroup() %&gt;% \n  # turn words into factors and order them based on their tf_idf values\n  # NOTE: This will not affect order the dataframe rows which is can be\n  #   done via the arrange function\n  # NOTE: Recording the word column this way is for ggplot to visualize them\n  #   as desired from top tf_idf to lowest\n  mutate(term = reorder(term, beta)) %&gt;% \n  ggplot(aes(term, beta, fill = topic)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~topic, scales = \"free\", ncol = 3) +\n  coord_flip()\n\nSelecting by beta",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#distribution-of-topics-in-stories",
    "href": "src/practice/topic-modeling-r.html#distribution-of-topics-in-stories",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.8 Distribution of Topics in Stories",
    "text": "9.8 Distribution of Topics in Stories\nLooking at how the stories are associated with each topic and how strong each association is.\n\n# Extracting gammas and putting them in a tidy format\ntm_gamma &lt;- tidy(topic_model, matrix = \"gamma\",\n                 # use the names of the stories instead of the default numbers\n                 document_names = rownames(sherlock_stm))\n\n\n# Visualizing the number of stories belonging to each topics and the confidence\n#   of the belonging\ntm_gamma %&gt;% \n  ggplot(aes(gamma, fill = as.factor(topic))) +\n  geom_histogram(show.legend = FALSE) +\n  facet_wrap(~topic, ncol = 3)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# Visualizing how much each topic appear in each story\ntm_gamma %&gt;% \n  ggplot(aes(topic, gamma, fill = document)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~document, scales = \"free\", ncol = 3) +\n  theme(strip.text.x = element_text(size = 5))\n\n\n\n\n\n\n\nThe model did an excellent job strongly associating the stories into one or more topics. This perfect association is rare in the world of topic modeling. The reason behind this perfect association here could be due to the small number of documents that we have.",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  },
  {
    "objectID": "src/practice/topic-modeling-r.html#references",
    "href": "src/practice/topic-modeling-r.html#references",
    "title": "\n9  Topic Modeling in R\n",
    "section": "\n9.9 References",
    "text": "9.9 References\n\nAdventures of Sherlock Holmes book by Arthur Conan Doyle on Project Gutenberg\n\nRegular Expressions 101",
    "crumbs": [
      "Practice",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Topic Modeling in R</span>"
    ]
  }
]