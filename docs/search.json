[
  {
    "objectID": "src/topic-modeling.html",
    "href": "src/topic-modeling.html",
    "title": "R Topic Modeling",
    "section": "",
    "text": "Understanding Sherlock Holmes Short Stories\nAmin G Alhashim 10/8/2021\n\n\nIntroduction\nThis a practice of topic modeling based on Julia Silge’s YouTube video Topic modeling with R and tidy data principles\n\n\nData Download & Prep\n\nlibrary(gutenbergr)  # to download Sherlock Holmes stories\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(tidytext)\n\n# Download stories\nsherlock_raw &lt;- gutenbergr::gutenberg_download(1661)\n\n# Remove first 28 rows\nsherlock_raw &lt;- sherlock_raw[-(1:28),]\n\n# Determining start of each story\nsherlock &lt;- sherlock_raw %&gt;% \n  # detect chapter start\n  mutate(story = ifelse(str_detect(text, \"^[MDCLXVI]+[.]\"), text, NA)) %&gt;%\n  # remove lines without header\n  filter(nchar(story) &gt; 5 | is.na(story)) %&gt;% \n  # fill down the chapter namem \n  fill(story) %&gt;%\n  # convert to factor\n  mutate(story = factor(story, levels = unique(story)))\n\n# Put in in tidytext dataframe\ntidy_sherlock &lt;- sherlock %&gt;% \n  mutate(line = row_number()) %&gt;% \n  # break the text column into tokens, create new column, and place the token into\n  unnest_tokens(word, text) %&gt;% \n  # remove stopwords\n  anti_join(stop_words) %&gt;% \n  # remove holmes that might affect our topic models\n  filter(word != \"holmes\")\n\n\n\nExplore tf-idf\n\nTo see which words are important in each story, i.e.,the words that appears many times in that story but few or none in the other stories.\ntf-idf is a great exploratory tool before starting with topic modeling\n\n\nlibrary(ggplot2)\n\ntidy_sherlock %&gt;% \n  # count number of occurance of words in stories\n  count(story, word, sort = TRUE) %&gt;% \n  # compute and add tf, idf, and tf_idf values for words\n  bind_tf_idf(word, story, n) %&gt;% \n  # group by story\n  group_by(story) %&gt;% \n  # take top 10 words of each story with higest tf_idf (last column)\n  top_n(10) %&gt;% \n  # unpack\n  ungroup() %&gt;% \n  # turn words into factors and order them based on their tf_idf values\n  # NOTE: This will not affect order the dataframe rows which is can be\n  #   done via the arrange function\n  # NOTE: Recording the word column this way is for ggplot to visualize them\n  #   as desired from top tf_idf to lowest\n  mutate(word = reorder(word, tf_idf)) %&gt;% \n  ggplot(aes(word, tf_idf, fill = story)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~story, scales = \"free\", ncol = 3) +\n  theme(strip.text.x = element_text(size = 5)) +\n  coord_flip()\n\n\n\n\nImplement Topic Modeling\nTraining the model for the topics\n\nlibrary(stm)        # for do topic modeling\nlibrary(quanteda)   # great text mining, will be used to structure the input\n                    #   to stm\n\n# Convert from tidy form to quanteda form (document x term matrix)\nsherlock_stm &lt;- tidy_sherlock %&gt;% \n  count(story, word, sort = TRUE) %&gt;% \n  cast_dfm(story, word, n)\n\n# Train the model\ntopic_model &lt;- stm(sherlock_stm, K = 6, init.type = \"Spectral\")\n\n## Beginning Spectral Initialization \n##   Calculating the gram matrix...\n##   Finding anchor words...\n##      ......\n##   Recovering initialization...\n##      ..........................................................................\n## Initialization complete.\n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 1 (approx. per word bound = -7.753) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 2 (approx. per word bound = -7.535, relative change = 2.817e-02) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 3 (approx. per word bound = -7.439, relative change = 1.274e-02) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 4 (approx. per word bound = -7.415, relative change = 3.114e-03) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 5 (approx. per word bound = -7.406, relative change = 1.256e-03) \n## Topic 1: st, simon, lord, day, lady \n##  Topic 2: red, hat, sir, goose, stone \n##  Topic 3: street, matter, hosmer, door, woman \n##  Topic 4: father, mccarthy, time, son, hand \n##  Topic 5: miss, door, night, rucastle, light \n##  Topic 6: door, house, time, night, matter \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 6 (approx. per word bound = -7.402, relative change = 5.850e-04) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Completing Iteration 7 (approx. per word bound = -7.401, relative change = 9.915e-05) \n## ............\n## Completed E-Step (0 seconds). \n## Completed M-Step. \n## Model Converged\n\nsummary(topic_model)\n\n## A topic model with 6 topics, 12 documents and a 7496 word dictionary.\n\n## Topic 1 Top Words:\n##       Highest Prob: st, simon, lord, day, lady, found, matter \n##       FREX: simon, clair, neville, lascar, opium, doran, pa \n##       Lift: aloysius, ceremony, doran, millar, pennies, _morning, 2_s_ \n##       Score: simon, st, clair, neville, frank, _danseuse_, lestrade \n## Topic 2 Top Words:\n##       Highest Prob: red, hat, sir, goose, stone, time, business \n##       FREX: goose, geese, horner, ryder, henry, peterson, wilson \n##       Lift: _disjecta, _echo_, _evening, _globe_, _our_, _pall, _st \n##       Score: goose, geese, wilson, horner, bird, _disjecta, league \n## Topic 3 Top Words:\n##       Highest Prob: street, matter, hosmer, woman, photograph, door, angel \n##       FREX: hosmer, angel, windibank, majesty, briony, photograph, king \n##       Lift: godfrey, leadenhall, mask, _affaire, _bijou_, _chronicle_, _dénouement_ \n##       Score: hosmer, angel, windibank, photograph, majesty, _affaire, adler \n## Topic 4 Top Words:\n##       Highest Prob: father, mccarthy, time, son, lestrade, hand, left \n##       FREX: mccarthy, pool, boscombe, openshaw, pips, horsham, turner \n##       Lift: dundee, horsham, pondicherry, savannah, sundial, _lone, 1869 \n##       Score: mccarthy, pool, lestrade, boscombe, openshaw, _métier_, turner \n## Topic 5 Top Words:\n##       Highest Prob: miss, door, night, rucastle, light, house, lady \n##       FREX: rucastle, hunter, stoner, toller, roylott, ventilator, beeches \n##       Lift: fowler, inhabited, slit, terrified, winchester, accept, armitage \n##       Score: rucastle, hunter, stoner, toller, _can_, roylott, ventilator \n## Topic 6 Top Words:\n##       Highest Prob: door, house, time, night, matter, coronet, morning \n##       FREX: coronet, arthur, gems, snow, hydraulic, colonel, holder \n##       Lift: fee, hastened, hydraulic, _en, 16a, 200, 4000 \n##       Score: coronet, arthur, gems, 200, snow, colonel, holder\n\n\nContribution of Words in Topics\nLooking at which words contribute the most in each topic.\n\n# Extracting betas and putting them in a tidy format\ntm_beta &lt;- tidy(topic_model)\n\n# Visualizing the top words contributing to each topic\ntm_beta %&gt;% \n  group_by(topic) %&gt;% \n  # top 10 word in each topic with higest beta (last column)\n  top_n(10) %&gt;% \n  ungroup() %&gt;% \n  # turn words into factors and order them based on their tf_idf values\n  # NOTE: This will not affect order the dataframe rows which is can be\n  #   done via the arrange function\n  # NOTE: Recording the word column this way is for ggplot to visualize them\n  #   as desired from top tf_idf to lowest\n  mutate(term = reorder(term, beta)) %&gt;% \n  ggplot(aes(term, beta, fill = topic)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~topic, scales = \"free\", ncol = 3) +\n  coord_flip()\n\n\n\n\nDistribution of Topics in Stories\nLooking at how the stories are associated with each topic and how strong each association is.\n\n# Extracting gammas and putting them in a tidy format\ntm_gamma &lt;- tidy(topic_model, matrix = \"gamma\",\n                 # use the names of the stories instead of the default numbers\n                 document_names = rownames(sherlock_stm))\n\n\n# Visualizing the number of stories belonging to each topics and the confidence\n#   of the belonging\ntm_gamma %&gt;% \n  ggplot(aes(gamma, fill = as.factor(topic))) +\n  geom_histogram(show.legend = FALSE) +\n  facet_wrap(~topic, ncol = 3)\n\n\n\n# Visualizing how much each topic appear in each story\ntm_gamma %&gt;% \n  ggplot(aes(topic, gamma, fill = document)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~document, scales = \"free\", ncol = 3) +\n  theme(strip.text.x = element_text(size = 5))\n\n The model did an excellent job strongly associating the stories into one or more topics. This perfect association is rare in the world of topic modeling. The reason behind this perfect association here could be due to the small number of documents that we have.",
    "crumbs": [
      "Index",
      "R Topic Modeling"
    ]
  },
  {
    "objectID": "src/quarto.html",
    "href": "src/quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "VSCode/RStudio -&gt; Render button\nTerminal -&gt; quarto preview\nTerminal -&gt; quarto preview help",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/quarto.html#render-review",
    "href": "src/quarto.html#render-review",
    "title": "Quarto",
    "section": "",
    "text": "VSCode/RStudio -&gt; Render button\nTerminal -&gt; quarto preview\nTerminal -&gt; quarto preview help",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/quarto.html#render-wo-review",
    "href": "src/quarto.html#render-wo-review",
    "title": "Quarto",
    "section": "Render w/o Review",
    "text": "Render w/o Review\n\nTerminal -&gt; quarto render\nTerminal -&gt; quarto render help",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/quarto.html#references",
    "href": "src/quarto.html#references",
    "title": "Quarto",
    "section": "References",
    "text": "References\n\nQuarto Reference",
    "crumbs": [
      "Index",
      "Quarto"
    ]
  },
  {
    "objectID": "src/index.html",
    "href": "src/index.html",
    "title": "Index",
    "section": "",
    "text": "This Quarto website hosts my notes for some of the programming/scripting languages that I have learned.",
    "crumbs": [
      "Index"
    ]
  },
  {
    "objectID": "src/r-basics.html",
    "href": "src/r-basics.html",
    "title": "R Basics",
    "section": "",
    "text": "Creating a project instead of a file comes with the advantage of saving the workspace settings\nCtrl+Enter: run line on which cursor is standing\nCtrl+Alt+I: insert new code chunk\nCtrl+Shift+C: comment/un-comment",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#general-notes",
    "href": "src/r-basics.html#general-notes",
    "title": "R Basics",
    "section": "",
    "text": "Creating a project instead of a file comes with the advantage of saving the workspace settings\nCtrl+Enter: run line on which cursor is standing\nCtrl+Alt+I: insert new code chunk\nCtrl+Shift+C: comment/un-comment",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#clear-workspace",
    "href": "src/r-basics.html#clear-workspace",
    "title": "R Basics",
    "section": "Clear Workspace",
    "text": "Clear Workspace\nStart by cleaning the workspace environment of the project to avoid mixing up variables created in other files.\n\nrm(list=ls())",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#data-types",
    "href": "src/r-basics.html#data-types",
    "title": "R Basics",
    "section": "Data Types",
    "text": "Data Types\n\ncharacter\nnumeric\nlogical\nraw\nimaginary numbers\n\n\nclass(x)    # give the data type of x\n\n\nMixing Data Types\n\ncharacter + numeric = character\nnumeric + logical = numeric\nnumeric + character + logical = character",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#data-structures",
    "href": "src/r-basics.html#data-structures",
    "title": "R Basics",
    "section": "Data Structures",
    "text": "Data Structures\n\nvector: hold single type of data\nmatrix: 2D vector\nlist: generic vector, each of its element can be any thing (character list of lists)\ndata frame: table where columns represent vectors\ntibbles: data frames, but slightly tweaked to work better with tidyverse package\nfactor\n\n\nstr(x)      # give the structure type of x\nlength(x)   # length of structure",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#basics-operations",
    "href": "src/r-basics.html#basics-operations",
    "title": "R Basics",
    "section": "Basics Operations",
    "text": "Basics Operations\nAssignment\n\nx &lt;- 3      # assign 3 to x\n(x &lt;- 3)    # assign 3 to x & print the result to console\n\n[1] 3\n\n\nGetting Help\n\nargs(round) # print the argument list of function\n?round        # show documentation of function in Help window\n\nDealing with Structure\n\n# concatenate set of values to create vector\nweight_g &lt;- c(50, 60, 3, 9)\nanimals &lt;- c(\"dog\", \"bat\", \"cat\")\n\n# utilizing logical values to pull specific values\nweight_g[weight_g &lt; 10 & weight_g &gt; 60 | weight_g == 50]\n\n[1] 50\n\n# pull dog & cat records\nanimals[animals %in% c(\"dog\", \"cat\")]\n\n[1] \"dog\" \"cat\"\n\nanimals[animals == \"dog\" | animals == \"cat\"]\n\n[1] \"dog\" \"cat\"\n\n\nStatistics\n\n# signaling missing data using NA\nheights &lt;- c(2, 3, NA, 4)\n\n# get mean while ignoring missing data\nmean(heights, na.rm = TRUE)\n\n[1] 3\n\n# how to use mean\n# ?mean",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#files-data-frames-plots",
    "href": "src/r-basics.html#files-data-frames-plots",
    "title": "R Basics",
    "section": "Files, Data Frames, & Plots",
    "text": "Files, Data Frames, & Plots\nThe here package makes it easy to point to file starting from the project main directory.\n\nlibrary(here)\n\nhere() starts at C:/Users/Amin Alhashim/Documents/GitHub/alhashimphd/notebooks\n\n\nLoading file from repository and saving it locally on disk. It is always a good idea to structure the workspace–for more information, see Best Practices for Scientific Computing paper.\n\ndownload.file(url = \"https://ndownloader.figshare.com/files/2292169\", \n    destfile = here(\"data\", \"portal_data_joined.csv\"))\n\nLoad file to R as data frame\n\nsurveys &lt;- read.csv(here(\"data\", \"portal_data_joined.csv\"))\n\nInspecting data frame\n\nclass(surveys)  # data type\n\n[1] \"data.frame\"\n\n\n\nstr(surveys)      # structure\n\n'data.frame':   34786 obs. of  13 variables:\n $ record_id      : int  1 72 224 266 349 363 435 506 588 661 ...\n $ month          : int  7 8 9 10 11 11 12 1 2 3 ...\n $ day            : int  16 19 13 16 12 12 10 8 18 11 ...\n $ year           : int  1977 1977 1977 1977 1977 1977 1977 1978 1978 1978 ...\n $ plot_id        : int  2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr  \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr  \"M\" \"M\" \"\" \"\" ...\n $ hindfoot_length: int  32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : int  NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : chr  \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr  \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr  \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr  \"Control\" \"Control\" \"Control\" \"Control\" ...\n\n\n\ndim(surveys)      # dimensions\n\n[1] 34786    13\n\nnrow(surveys)\n\n[1] 34786\n\nncol(surveys)\n\n[1] 13\n\n\n\nsummary(surveys)\n\n   record_id         month             day            year         plot_id     \n Min.   :    1   Min.   : 1.000   Min.   : 1.0   Min.   :1977   Min.   : 1.00  \n 1st Qu.: 8964   1st Qu.: 4.000   1st Qu.: 9.0   1st Qu.:1984   1st Qu.: 5.00  \n Median :17762   Median : 6.000   Median :16.0   Median :1990   Median :11.00  \n Mean   :17804   Mean   : 6.474   Mean   :16.1   Mean   :1990   Mean   :11.34  \n 3rd Qu.:26655   3rd Qu.:10.000   3rd Qu.:23.0   3rd Qu.:1997   3rd Qu.:17.00  \n Max.   :35548   Max.   :12.000   Max.   :31.0   Max.   :2002   Max.   :24.00  \n                                                                               \n  species_id            sex            hindfoot_length     weight      \n Length:34786       Length:34786       Min.   : 2.00   Min.   :  4.00  \n Class :character   Class :character   1st Qu.:21.00   1st Qu.: 20.00  \n Mode  :character   Mode  :character   Median :32.00   Median : 37.00  \n                                       Mean   :29.29   Mean   : 42.67  \n                                       3rd Qu.:36.00   3rd Qu.: 48.00  \n                                       Max.   :70.00   Max.   :280.00  \n                                       NA's   :3348    NA's   :2503    \n    genus             species              taxa            plot_type        \n Length:34786       Length:34786       Length:34786       Length:34786      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n\n\nShow first/last few objects/records/rows\n\nhead(surveys)\n\n  record_id month day year plot_id species_id sex hindfoot_length weight\n1         1     7  16 1977       2         NL   M              32     NA\n2        72     8  19 1977       2         NL   M              31     NA\n3       224     9  13 1977       2         NL                  NA     NA\n4       266    10  16 1977       2         NL                  NA     NA\n5       349    11  12 1977       2         NL                  NA     NA\n6       363    11  12 1977       2         NL                  NA     NA\n    genus  species   taxa plot_type\n1 Neotoma albigula Rodent   Control\n2 Neotoma albigula Rodent   Control\n3 Neotoma albigula Rodent   Control\n4 Neotoma albigula Rodent   Control\n5 Neotoma albigula Rodent   Control\n6 Neotoma albigula Rodent   Control\n\ntail(surveys)\n\n      record_id month day year plot_id species_id sex hindfoot_length weight\n34781     26787     9  27 1997       7         PL   F              21     16\n34782     26966    10  25 1997       7         PL   M              20     16\n34783     27185    11  22 1997       7         PL   F              21     22\n34784     27792     5   2 1998       7         PL   F              20      8\n34785     28806    11  21 1998       7         PX                  NA     NA\n34786     30986     7   1 2000       7         PX                  NA     NA\n            genus  species   taxa        plot_type\n34781  Peromyscus leucopus Rodent Rodent Exclosure\n34782  Peromyscus leucopus Rodent Rodent Exclosure\n34783  Peromyscus leucopus Rodent Rodent Exclosure\n34784  Peromyscus leucopus Rodent Rodent Exclosure\n34785 Chaetodipus      sp. Rodent Rodent Exclosure\n34786 Chaetodipus      sp. Rodent Rodent Exclosure\n\n\nRetrieve specific element/row/column\n\nsurveys[1,1]    # element[1,1]\n\n[1] 1\n\nsurveys[1, ]    # row 1\n\n  record_id month day year plot_id species_id sex hindfoot_length weight\n1         1     7  16 1977       2         NL   M              32     NA\n    genus  species   taxa plot_type\n1 Neotoma albigula Rodent   Control\n\nhead(surveys[ ,1])  # column 1\n\n[1]   1  72 224 266 349 363\n\nhead(surveys$sex)     # column by name\n\n[1] \"M\" \"M\" \"\"  \"\"  \"\"  \"\" \n\n\nDealing with factor (categorical) columns. R convert columns that contain characters to factors by default. Factors are treated as integer vectors. By default, R sorts levels in alphabetical order.\n\nlevels(surveys$sex)\n\nNULL\n\nnlevels(surveys$sex)\n\n[1] 0\n\n\nReorder factors (to get better plots)\n\nsurveys$sex_ordered &lt;- factor(surveys$sex, level=c(\"F\", \"M\", \"\"))\nstr(surveys$sex_ordered)\n\n Factor w/ 3 levels \"F\",\"M\",\"\": 2 2 3 3 3 3 3 3 2 3 ...\n\nlevels(surveys$sex_ordered)\n\n[1] \"F\" \"M\" \"\" \n\nnlevels(surveys$sex_ordered)\n\n[1] 3\n\n\nPlotting Histogram\n\n# plot(surveys$sex)  # not possible\nplot(surveys$sex_ordered)\n\n\n\n\n\n\n\n\nEnhance the plot\n\nlevels(surveys$sex_ordered)[1] &lt;- \"Female\"\nlevels(surveys$sex_ordered)[2] &lt;- \"Male\"\nplot(surveys$sex_ordered)",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#data-manipulation",
    "href": "src/r-basics.html#data-manipulation",
    "title": "R Basics",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\ntdlyr\n\nmakes manipulation of data easier\nbuilt to work with data frames directly\ncan directly work with data stored in an external database which give the advantage of only bringing what we need to the memory to work on without having to bring the whole database\n\ntidyr\n\nallows to swiftly convert b/w different data formats for plotting & analysis in order to accommodate the different requirements by different functions\n\nsometime we want one row per measurement\nother times we want the data aggregated like when plotting\n\n\n\nBefore using tdlyr and tidyr:\n\nInstall tidyverse package: umbrella-package that install several packages (tidyr, dplyr, ggplot2 tibble, magrittr, etc.)\nLoad the package each session\n\nLoad the package\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nLoad & inspect data\n\n# notice the '_' instead of '.' of basic R\nsurveys &lt;- read_csv(here(\"data\", \"portal_data_joined.csv\"))\n\nRows: 34786 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): species_id, sex, genus, species, taxa, plot_type\ndbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstr(surveys)    # structure: tbl_df (tibble)\n\nspc_tbl_ [34,786 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ record_id      : num [1:34786] 1 72 224 266 349 363 435 506 588 661 ...\n $ month          : num [1:34786] 7 8 9 10 11 11 12 1 2 3 ...\n $ day            : num [1:34786] 16 19 13 16 12 12 10 8 18 11 ...\n $ year           : num [1:34786] 1977 1977 1977 1977 1977 ...\n $ plot_id        : num [1:34786] 2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr [1:34786] \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr [1:34786] \"M\" \"M\" NA NA ...\n $ hindfoot_length: num [1:34786] 32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : num [1:34786] NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : chr [1:34786] \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr [1:34786] \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr [1:34786] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr [1:34786] \"Control\" \"Control\" \"Control\" \"Control\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   record_id = col_double(),\n  ..   month = col_double(),\n  ..   day = col_double(),\n  ..   year = col_double(),\n  ..   plot_id = col_double(),\n  ..   species_id = col_character(),\n  ..   sex = col_character(),\n  ..   hindfoot_length = col_double(),\n  ..   weight = col_double(),\n  ..   genus = col_character(),\n  ..   species = col_character(),\n  ..   taxa = col_character(),\n  ..   plot_type = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n# view(surveys) # preview in the viewer window, avoid when rendering\n\nselect certain columns\n\nselect(surveys, plot_id, species_id, weight)\n\n# A tibble: 34,786 × 3\n   plot_id species_id weight\n     &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1       2 NL             NA\n 2       2 NL             NA\n 3       2 NL             NA\n 4       2 NL             NA\n 5       2 NL             NA\n 6       2 NL             NA\n 7       2 NL             NA\n 8       2 NL             NA\n 9       2 NL            218\n10       2 NL             NA\n# ℹ 34,776 more rows\n\n\nselect all columns except …\n\nselect(surveys, -sex)\n\n# A tibble: 34,786 × 12\n   record_id month   day  year plot_id species_id hindfoot_length weight genus  \n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1         1     7    16  1977       2 NL                      32     NA Neotoma\n 2        72     8    19  1977       2 NL                      31     NA Neotoma\n 3       224     9    13  1977       2 NL                      NA     NA Neotoma\n 4       266    10    16  1977       2 NL                      NA     NA Neotoma\n 5       349    11    12  1977       2 NL                      NA     NA Neotoma\n 6       363    11    12  1977       2 NL                      NA     NA Neotoma\n 7       435    12    10  1977       2 NL                      NA     NA Neotoma\n 8       506     1     8  1978       2 NL                      NA     NA Neotoma\n 9       588     2    18  1978       2 NL                      NA    218 Neotoma\n10       661     3    11  1978       2 NL                      NA     NA Neotoma\n# ℹ 34,776 more rows\n# ℹ 3 more variables: species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nSelect rows based on criteria\n\nfilter(surveys, year == 1995)\n\n# A tibble: 1,180 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1     22314     6     7  1995       2 NL         M                  34     NA\n 2     22728     9    23  1995       2 NL         F                  32    165\n 3     22899    10    28  1995       2 NL         F                  32    171\n 4     23032    12     2  1995       2 NL         F                  33     NA\n 5     22003     1    11  1995       2 DM         M                  37     41\n 6     22042     2     4  1995       2 DM         F                  36     45\n 7     22044     2     4  1995       2 DM         M                  37     46\n 8     22105     3     4  1995       2 DM         F                  37     49\n 9     22109     3     4  1995       2 DM         M                  37     46\n10     22168     4     1  1995       2 DM         M                  36     48\n# ℹ 1,170 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nPiping: Sending the results of one function to another\n\n# in multiple steps\nsurvey_less5 &lt;- filter(surveys, weight &lt; 5)\nsurvey_sml &lt;- select(survey_less5, species_id, sex, weight)\n\n# in one long step\nsurvey_sml &lt;- select(filter(surveys, weight &lt; 5), species_id, sex, weight)\n\n# using pipe %&gt;% of magritter package.  Use Ctrl + Shift + M to add\nsurvey_sml &lt;- surveys %&gt;%\n    filter(weight &lt; 5) %&gt;%\n    select(species_id, sex, weight)\n\nSummary of groups of 1+ column\n\n# one factor\nsurveys %&gt;%\n    group_by(sex) %&gt;%\n    summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  sex   mean_weight\n  &lt;chr&gt;       &lt;dbl&gt;\n1 F            42.2\n2 M            43.0\n3 &lt;NA&gt;         64.7\n\n\n\n# two factors\nsurveys %&gt;%\n    group_by(sex, species) %&gt;%\n    summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 81 × 3\n# Groups:   sex [3]\n   sex   species     mean_weight\n   &lt;chr&gt; &lt;chr&gt;             &lt;dbl&gt;\n 1 F     albigula         154.  \n 2 F     baileyi           30.2 \n 3 F     eremicus          22.8 \n 4 F     flavus             7.97\n 5 F     fulvescens        13.7 \n 6 F     fulviventer       69   \n 7 F     hispidus          69.0 \n 8 F     leucogaster       31.1 \n 9 F     leucopus          19.3 \n10 F     maniculatus       22.1 \n# ℹ 71 more rows\n\nsurveys %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight, na.rm = TRUE))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 81 × 3\n# Groups:   species [40]\n   species         sex   mean_weight\n   &lt;chr&gt;           &lt;chr&gt;       &lt;dbl&gt;\n 1 albigula        F           154. \n 2 albigula        M           166. \n 3 albigula        &lt;NA&gt;        168. \n 4 audubonii       &lt;NA&gt;        NaN  \n 5 baileyi         F            30.2\n 6 baileyi         M            33.8\n 7 baileyi         &lt;NA&gt;         30.6\n 8 bilineata       &lt;NA&gt;        NaN  \n 9 brunneicapillus &lt;NA&gt;        NaN  \n10 chlorurus       &lt;NA&gt;        NaN  \n# ℹ 71 more rows\n\n\n\n# to avoid using na.rm = FALSE each statistics\nsurveys %&gt;%\n    filter(!is.na(weight)) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n())\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species  sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;    &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 albigula F          154.      39.2        652\n 2 albigula M          166.      49.0        484\n 3 albigula &lt;NA&gt;       168.      44.2         16\n 4 baileyi  F           30.2      5.27      1617\n 5 baileyi  M           33.8      8.27      1188\n 6 baileyi  &lt;NA&gt;        30.6      9.96         5\n 7 eremicus F           22.8      4.57       568\n 8 eremicus M           20.6      3.49       689\n 9 eremicus &lt;NA&gt;        17.7      0.577        3\n10 flavus   F            7.97     1.69       742\n# ℹ 49 more rows\n\n\n\n# arrange by mean weight\nsurveys %&gt;%\n    filter(!is.na(weight)) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n    arrange(mean_weight)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species   sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;     &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 flavus    &lt;NA&gt;         6        1.63         4\n 2 taylori   M            7.36     0.842       14\n 3 flavus    M            7.89     1.59       802\n 4 flavus    F            7.97     1.69       742\n 5 taylori   F            9.16     2.24        31\n 6 montanus  M            9.5      1.29         4\n 7 megalotis M           10.1      1.73      1339\n 8 montanus  F           11        2.16         4\n 9 megalotis &lt;NA&gt;        11.1      2.57        12\n10 megalotis F           11.1      2.56      1184\n# ℹ 49 more rows\n\n\n\n# in descending order\nsurveys %&gt;%\n    filter(!is.na(weight)) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n    arrange(desc(mean_weight))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species     sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 albigula    &lt;NA&gt;        168.       44.2       16\n 2 albigula    M           166.       49.0      484\n 3 albigula    F           154.       39.2      652\n 4 hispidus    &lt;NA&gt;        130        NA          1\n 5 spilosoma   M           130        NA          1\n 6 spectabilis M           122.       24.0     1220\n 7 spectabilis &lt;NA&gt;        120        18.5       18\n 8 spectabilis F           118.       21.5     1106\n 9 fulviventer F            69        37.8       16\n10 hispidus    F            69.0      29.7       98\n# ℹ 49 more rows\n\n\n\n# by count\nsurveys %&gt;%\n    filter(!is.na(weight)) %&gt;%\n    group_by(species, sex) %&gt;%\n    summarise(mean_weight = mean(weight), sd_weight = sd(weight), sd_count = n()) %&gt;%\n    arrange(sd_count)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 59 × 5\n# Groups:   species [22]\n   species     sex   mean_weight sd_weight sd_count\n   &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 hispidus    &lt;NA&gt;        130      NA            1\n 2 intermedius &lt;NA&gt;         18      NA            1\n 3 leucopus    &lt;NA&gt;         25      NA            1\n 4 spilosoma   F            57      NA            1\n 5 spilosoma   M           130      NA            1\n 6 fulviventer &lt;NA&gt;         40.5     6.36         2\n 7 leucogaster &lt;NA&gt;         29      11.3          2\n 8 eremicus    &lt;NA&gt;         17.7     0.577        3\n 9 ordii       &lt;NA&gt;         50.7     6.51         3\n10 sp.         F            20.7     1.15         3\n# ℹ 49 more rows\n\n\nCount of a categorical column\n\nsurveys %&gt;%\n    count(sex)\n\n# A tibble: 3 × 2\n  sex       n\n  &lt;chr&gt; &lt;int&gt;\n1 F     15690\n2 M     17348\n3 &lt;NA&gt;   1748\n\n\nReshaping with gather & spreed\n\n# prepare the needed data first\nsurveys_gw &lt;- surveys %&gt;%\n    filter(!is.na(weight)) %&gt;%\n    group_by(genus, plot_id) %&gt;%\n    summarize(mean_weight = mean(weight))\n\n`summarise()` has grouped output by 'genus'. You can override using the\n`.groups` argument.\n\n\n\n# creating a 2D table where each dimension represent a category\n# the cell will represent a statistics\nsurveys_spread &lt;- surveys_gw %&gt;%\n    spread(key = genus, value = mean_weight)\nstr(surveys_spread)\n\ntibble [24 × 11] (S3: tbl_df/tbl/data.frame)\n $ plot_id        : num [1:24] 1 2 3 4 5 6 7 8 9 10 ...\n $ Baiomys        : num [1:24] 7 6 8.61 NA 7.75 ...\n $ Chaetodipus    : num [1:24] 22.2 25.1 24.6 23 18 ...\n $ Dipodomys      : num [1:24] 60.2 55.7 52 57.5 51.1 ...\n $ Neotoma        : num [1:24] 156 169 158 164 190 ...\n $ Onychomys      : num [1:24] 27.7 26.9 26 28.1 27 ...\n $ Perognathus    : num [1:24] 9.62 6.95 7.51 7.82 8.66 ...\n $ Peromyscus     : num [1:24] 22.2 22.3 21.4 22.6 21.2 ...\n $ Reithrodontomys: num [1:24] 11.4 10.7 10.5 10.3 11.2 ...\n $ Sigmodon       : num [1:24] NA 70.9 65.6 82 82.7 ...\n $ Spermophilus   : num [1:24] NA NA NA NA NA NA NA NA NA NA ...\n\nhead(surveys_spread)\n\n# A tibble: 6 × 11\n  plot_id Baiomys Chaetodipus Dipodomys Neotoma Onychomys Perognathus Peromyscus\n    &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1       1    7           22.2      60.2    156.      27.7        9.62       22.2\n2       2    6           25.1      55.7    169.      26.9        6.95       22.3\n3       3    8.61        24.6      52.0    158.      26.0        7.51       21.4\n4       4   NA           23.0      57.5    164.      28.1        7.82       22.6\n5       5    7.75        18.0      51.1    190.      27.0        8.66       21.2\n6       6   NA           24.9      58.6    180.      25.9        7.81       21.8\n# ℹ 3 more variables: Reithrodontomys &lt;dbl&gt;, Sigmodon &lt;dbl&gt;, Spermophilus &lt;dbl&gt;\n\n\n\n# bring spread back\nsurveys_gw &lt;- surveys_spread %&gt;%\n    gather(key = genus, value = mean_weight, -plot_id)\nstr(surveys_gw)\n\ntibble [240 × 3] (S3: tbl_df/tbl/data.frame)\n $ plot_id    : num [1:240] 1 2 3 4 5 6 7 8 9 10 ...\n $ genus      : chr [1:240] \"Baiomys\" \"Baiomys\" \"Baiomys\" \"Baiomys\" ...\n $ mean_weight: num [1:240] 7 6 8.61 NA 7.75 ...\n\nhead(surveys_gw)\n\n# A tibble: 6 × 3\n  plot_id genus   mean_weight\n    &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n1       1 Baiomys        7   \n2       2 Baiomys        6   \n3       3 Baiomys        8.61\n4       4 Baiomys       NA   \n5       5 Baiomys        7.75\n6       6 Baiomys       NA   \n\n\nFiltering\n\n# Remove missing data\nsurvey_complete &lt;- surveys %&gt;%\n  filter(!is.na(weight), !is.na(hindfoot_length), !is.na(sex))\n\n\n# Filter those that has sample greater than 50\nspecies_counts &lt;- survey_complete %&gt;%\n  count(species_id) %&gt;%\n  filter(n &gt;= 50)\n\n\n# filter only those in the indicated category\nsurveys_com &lt;- surveys %&gt;%\n    filter(species_id %in% )\n\nSaving to disk\n\nwrite_cvs()",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#visualization",
    "href": "src/r-basics.html#visualization",
    "title": "R Basics",
    "section": "Visualization",
    "text": "Visualization\n\nHelp in making complex plots from data frames in simple steps\nggplot graphics are built step by step by adding new elements; this makes it flexible as well as customization\n\nStep 1: Bind the plot to specific data frame\n\nsurveys_plot &lt;- ggplot(data = survey_complete, \n    mapping = aes(x = weight, y = hindfoot_length))\n\n# Color for each group\nsurveys_plot &lt;- ggplot(data = survey_complete, \n    mapping = aes(x = weight, y = hindfoot_length),\n    color=species_id)\n\nStep 2: Select the type of the plot\n\nscatter plot, dot plots, etc. &gt; geom_point()\nboxplots &gt; geom_boxplot()\ntrend lines, time series, etc. &gt; geom_line()\n\nScatter plot\n\nsurveys_plot + geom_point()\n\n\n\n\n\n\n\n# add transparency\nsurveys_plot + geom_point(alpha = 0.1)\n\n\n\n\n\n\n\n# color if not used in binding\nsurveys_plot + geom_point(alpha = 0.1, color = \"black\")\n\n\n\n\n\n\n\n# add color if not used in binding\nsurveys_plot + geom_point(alpha = 0.1, aes(color = species_id))\n\n\n\n\n\n\n\n# make the color blend by introducing small random variation in points locations\n# used when having small data sets\nsurveys_plot + geom_jitter(alpha = 0.1)\n\n\n\n\n\n\n\n\nBoxplot\n\nsurveys_plot &lt;- ggplot(data = survey_complete, \n    mapping = aes(x = species_id, y = weight))\n\nsurveys_plot + geom_boxplot()\n\n\n\n\n\n\n\n# show data\nsurveys_plot + geom_boxplot(alpha = 0.5) + \n    geom_jitter(alpha = 0.1, color = \"tomato\")\n\n\n\n\n\n\n\n# bring boxplot layer in front\nsurveys_plot + geom_jitter(alpha = 0.1, color = \"tomato\") +\n    geom_boxplot(alpha = 0.7)\n\n\n\n\n\n\n\n\nTime series data\n\n# create appropriate dataset\nyearly_count &lt;- survey_complete %&gt;%\n    count(year, species_id)\n\nsurveys_plot &lt;- ggplot(data = yearly_count, \n    mapping = aes(x = year, y = n))\n\nsurveys_plot + geom_line()\n\n\n\n\n\n\n\n# make it more meaningful by breaking it by category\nsurveys_plot + geom_line(aes(group = species_id))\n\n\n\n\n\n\n\n# make it more colorful\nsurveys_plot + geom_line(aes(color = species_id))\n\n\n\n\n\n\n\n# split into multiple plots\nsurveys_plot + geom_line() + facet_wrap(~ species_id)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n# split the line in each plot by sex\nyearly_sex_counts &lt;- survey_complete %&gt;%\n    count(year, species_id, sex)\n\nsurveys_plot &lt;- ggplot(data = yearly_sex_counts, \n    mapping = aes(x = year, y = n))\n\nsurveys_plot + geom_line(aes(color = sex)) +\n    facet_wrap(~ species_id)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n# remove background\nsurveys_plot + geom_line(aes(color = sex)) +\n    facet_wrap(~ species_id) +\n    theme_bw() +\n    theme(panel.grid = element_blank())\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  },
  {
    "objectID": "src/r-basics.html#references",
    "href": "src/r-basics.html#references",
    "title": "R Basics",
    "section": "References",
    "text": "References\n\nOU Software Carpentry Workshop (check other workshops here)\n\nMain Tutorial\nData Carpentry with R\nSoftware Carpentry with R\nEtherpad\nGoogle Doc\n\nIntro to ggplot by Allison Horst\nR for Data Science book by Garrett Grolemund and Hadley Wickham\nBest Practices for Scientific Computing paper",
    "crumbs": [
      "Index",
      "R Basics"
    ]
  }
]