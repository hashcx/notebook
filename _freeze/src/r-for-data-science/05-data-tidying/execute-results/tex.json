{
  "hash": "b6fdcff94ea2d83d5fa359c73c5bb2eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Tidying\"\nnumber-sections: true\n---\n\n\n\n## Introduction\n\nThis page explains how use the `tidyr` package to put data in tidy form where:\n\n- each row represents an observation\n- each column represents a variable\n- each cell contain a single value\n\nPutting data in tidy form will make it easy to process using tidyverse packages.\n\n\n## Clear Workspace\n\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n\n## Packages {#sec-packages}\n\n### List\n\nList all the packages that will be used in this script.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages <- c(\"styler\", \"dplyr\", \"tidyr\")\n```\n:::\n\n\n\n### Install Missing\n\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n```\n:::\n\n\n\n### Load\n\nLoad all packages\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: styler\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: dplyr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tidyr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Lengthening Data, `pivot_longer`\n\n\n### One Variable in Column Headers\n\n#### Toy Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- tribble(\n  ~id, ~A, ~B_1, ~B_2,\n  \"A\", 1, 10.1, 10.2,\n  \"B\", 2, 20.1, NA,\n  \"C\", 3, NA, 30.2\n)\n\nds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  id        A   B_1   B_2\n  <chr> <dbl> <dbl> <dbl>\n1 A         1  10.1  10.2\n2 B         2  20.1  NA  \n3 C         3  NA    30.2\n```\n\n\n:::\n:::\n\n\n\n\n#### Lengthen\n\n> I want the values in all the columns that start with `B_` to be placed into a (single) column named `value`.  To distinguish which value belong to which column, create a new column called `B_type` for this purpuse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds |> \n  pivot_longer(\n    cols = starts_with(\"B_\"),\n    names_to = \"B_type\",\n    values_to = \"value\"\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  id        A B_type value\n  <chr> <dbl> <chr>  <dbl>\n1 A         1 B_1     10.1\n2 A         1 B_2     10.2\n3 B         2 B_1     20.1\n4 B         2 B_2     NA  \n5 C         3 B_1     NA  \n6 C         3 B_2     30.2\n```\n\n\n:::\n:::\n\n\n\n#### Remove NA\n\nUse the argument `values_drop_na = TRUE`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds |> \n  pivot_longer(\n    cols = starts_with(\"B_\"),\n    names_to = \"B_type\",\n    values_to = \"value\",\n    values_drop_na = TRUE\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 4\n  id        A B_type value\n  <chr> <dbl> <chr>  <dbl>\n1 A         1 B_1     10.1\n2 A         1 B_2     10.2\n3 B         2 B_1     20.1\n4 C         3 B_2     30.2\n```\n\n\n:::\n:::\n\n\n\n\n#### Fix Cell Values\n\nUse the `readr::parse_number()` function to extract the first number from var2 variable and ignore all other text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds |> \n  pivot_longer(\n    cols = starts_with(\"B_\"),\n    names_to = \"B_type\",\n    values_to = \"value\",\n    values_drop_na = TRUE\n  ) |> \n  mutate(\n    B_type = readr::parse_number(B_type)\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 4\n  id        A B_type value\n  <chr> <dbl>  <dbl> <dbl>\n1 A         1      1  10.1\n2 A         1      2  10.2\n3 B         2      1  20.1\n4 C         3      2  30.2\n```\n\n\n:::\n:::\n\n\n\n\n### Multiple Variables in Column Headers\n\n#### Toy Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds2 <- tribble(\n  ~id, ~A, ~B1_C1, ~B1_C2, ~B2_C1, ~B2_C2,\n  \"A\", 1, 10.11, 10.12, 10.21, 10.22,\n  \"B\", 2, 20.11, 20.12, NA, 20.22,\n  \"C\", 3, 30.11, NA, 30.21, 30.22\n)\n\nds2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 6\n  id        A B1_C1 B1_C2 B2_C1 B2_C2\n  <chr> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 A         1  10.1  10.1  10.2  10.2\n2 B         2  20.1  20.1  NA    20.2\n3 C         3  30.1  NA    30.2  30.2\n```\n\n\n:::\n:::\n\n\n\n#### Lengthening w/o Seperating Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds2 |> \n  pivot_longer(\n    cols = starts_with(\"B\"),\n    names_to = \"B_C\",\n    values_to = \"value\"\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 4\n   id        A B_C   value\n   <chr> <dbl> <chr> <dbl>\n 1 A         1 B1_C1  10.1\n 2 A         1 B1_C2  10.1\n 3 A         1 B2_C1  10.2\n 4 A         1 B2_C2  10.2\n 5 B         2 B1_C1  20.1\n 6 B         2 B1_C2  20.1\n 7 B         2 B2_C1  NA  \n 8 B         2 B2_C2  20.2\n 9 C         3 B1_C1  30.1\n10 C         3 B1_C2  NA  \n11 C         3 B2_C1  30.2\n12 C         3 B2_C2  30.2\n```\n\n\n:::\n:::\n\n\n\n#### Lengthening w/ Seperating Variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds2 |> \n  pivot_longer(\n    cols = !(id:A),\n    names_sep = \"_\",\n    names_to = c(\"B\", \"C\"),\n    values_to = \"value\"\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 5\n   id        A B     C     value\n   <chr> <dbl> <chr> <chr> <dbl>\n 1 A         1 B1    C1     10.1\n 2 A         1 B1    C2     10.1\n 3 A         1 B2    C1     10.2\n 4 A         1 B2    C2     10.2\n 5 B         2 B1    C1     20.1\n 6 B         2 B1    C2     20.1\n 7 B         2 B2    C1     NA  \n 8 B         2 B2    C2     20.2\n 9 C         3 B1    C1     30.1\n10 C         3 B1    C2     NA  \n11 C         3 B2    C1     30.2\n12 C         3 B2    C2     30.2\n```\n\n\n:::\n:::\n\n\n\n#### Dropping NA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds2 |> \n  pivot_longer(\n    cols = !(id:A),\n    names_sep = \"_\",\n    names_to = c(\"B\", \"C\"),\n    values_to = \"value\",\n    values_drop_na = TRUE\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 5\n   id        A B     C     value\n   <chr> <dbl> <chr> <chr> <dbl>\n 1 A         1 B1    C1     10.1\n 2 A         1 B1    C2     10.1\n 3 A         1 B2    C1     10.2\n 4 A         1 B2    C2     10.2\n 5 B         2 B1    C1     20.1\n 6 B         2 B1    C2     20.1\n 7 B         2 B2    C2     20.2\n 8 C         3 B1    C1     30.1\n 9 C         3 B2    C1     30.2\n10 C         3 B2    C2     30.2\n```\n\n\n:::\n:::\n\n\n\n### Data and Variable Names in Colmnn Headers\n\n#### Toy Example\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds3 <- tribble(\n  ~id, ~child1_name, ~child1_age, ~child2_name, ~child2_age,\n  \"A\", \"A1\", 11, \"A2\", 12,\n  \"B\", \"B1\", 21, NA, NA,\n  \"C\", NA, NA, \"C2\", 32\n)\n\nds3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  id    child1_name child1_age child2_name child2_age\n  <chr> <chr>            <dbl> <chr>            <dbl>\n1 A     A1                  11 A2                  12\n2 B     B1                  21 <NA>                NA\n3 C     <NA>                NA C2                  32\n```\n\n\n:::\n:::\n\n\n\n#### Lengthening w/o Removing NA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds3 |> \n  pivot_longer(\n    cols = starts_with(\"child\"),\n    names_sep = \"_\",\n    names_to = c(\"child\", \".value\")\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  id    child  name    age\n  <chr> <chr>  <chr> <dbl>\n1 A     child1 A1       11\n2 A     child2 A2       12\n3 B     child1 B1       21\n4 B     child2 <NA>     NA\n5 C     child1 <NA>     NA\n6 C     child2 C2       32\n```\n\n\n:::\n:::\n\n\n\n#### Lengthening w Removing NA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds3 |> \n  pivot_longer(\n    cols = starts_with(\"child\"),\n    names_sep = \"_\",\n    names_to = c(\"child\", \".value\"),\n    values_drop_na = TRUE\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 4\n  id    child  name    age\n  <chr> <chr>  <chr> <dbl>\n1 A     child1 A1       11\n2 A     child2 A2       12\n3 B     child1 B1       21\n4 C     child2 C2       32\n```\n\n\n:::\n:::\n\n\n\n\n#### Fixing Cell Values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds_lengthen <- ds3 |> \n  pivot_longer(\n    cols = starts_with(\"child\"),\n    names_sep = \"_\",\n    names_to = c(\"child\", \".value\"),\n    values_drop_na = TRUE\n  ) |> \n  mutate(\n    child = readr::parse_number(child)\n  )\n\nds_lengthen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 4\n  id    child name    age\n  <chr> <dbl> <chr> <dbl>\n1 A         1 A1       11\n2 A         2 A2       12\n3 B         1 B1       21\n4 C         2 C2       32\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}