{
  "hash": "82e0723dbb7266a12eff46abd809eee8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data visualization\"\n---\n\n\n\nClear the workspace to avoid any problems\n\n\n\n\n\n\n\nList all the packages that will be used in this script.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages = c(\"palmerpenguins\", 'ggthemes', 'ggplot2')\n```\n:::\n\n\n\n\nAny missing package will be installed automatically\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n```\n:::\n\n\n\nLoad all packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\nlapply(packages, require, character.only = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Steps of plot creation\n\nWe will work on the `penguins` dataset from the `palmerpenguins` package.  Although the package can be loaded using the command below, it listed and automatically loaded using the above chunks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\n### Load `ggplot2` Package\n\nLoad the `ggplot2` package using the `library` function--it was listed and automatically loaded using the above chunks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n### Create `ggplot` object\n\nCreate an empty canvas by instantiating a `ggplot` object using the `ggplot()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Link Dataset\n\nLink the dataset with the instantiated `ggplot` object using the `data` parameter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Map 2 Variables\n\nSpecify which of the variables in the dataset will be used as the plot aesthetics (visual properties) using the `mapping` argument done via the `aes()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Show Data\n\nSpecify how the data (observations) will be represented geometrically on the plot, eg, bars, points, or line.  The functions starting with `geom_` is used for this purpose.  These functions add layer of the selected geometric object to the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Map 1 More Variables\n\nOther variables in the dataset can be linked to plot aesthetics (visual properties) using the `mapping` argument done via the `aes()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Show Data Again Differently\n\nMore geometric representations for the data can be specified using the functions starting with `geom_` which will add layer of the selected geometric object to the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Globally & Locally Mapped Variables\n\nThe aesthetic mapping defined in the `ggplot()` function is *global* meaning that all the `geom_()` functions inherit it.  However, the aesthetic mapping defined in the `geom_()` functions are local, ie, not shared with other `gemo_()` functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Map Same Variable Multiple Ways\n\nWe can link the same variable to multiple plot aesthetics (visual properties) using the `mapping` parameter done via the `aes()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n### More Accessible\n\nThe `labs()` function can be used to make the plot more accessible.  The function will add new layer to the plot and the following items can be added to the layer using the corresponding parameters\n\n- a title using the `title` parameter\n- a sub-title, if necessary, using the `subtitle` parameter\n- x-axis title using the `x` parameter\n- y-axis title using the `y` parameter \n- data-series label or legend using the `color` and/or `shape` parameters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nOther types of texts can be added using other functions.  The other types of texts are:\n\n- x-axis label\n- y-axis label\n- data labels, if necessary\n- annotation for interesting or important data, if exist\n\n\n### Color-blind Safe\n\nMake the plot more color-blind safe by using the `scale_color_colorblind()` function from the `ggthemes` package which will add new layer to the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Implicit Call\n\nThe first one or two arguments of functions are so important that scientists should know them by heart.  Hence, to save some typing, the name of these arguments are usually omitted and only the values assigned to them are kept, ie, the names becomes implicit and no more explicit.  Hence, the above call can be written as follows--the arguments `data` and `mapping` were omitted.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n### Pipe Operator\n\nThe pipe operator `\\>` (shortcut: `Ctrl+M`) can be used to make the code tidy.  The above code can be re-written as follow--notice the dataset was pulled before the call to the `ggplot` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}