{
  "hash": "3ce225329227de82b2fa47aeb8a7fc93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Visualization\"\nnumber-sections: true\n---\n\n\n## Clear Workspace, DON'T EDIT {-}\n\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n## List Used Packages, EDIT {-}\n\nList all the packages that will be used in chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages = c(\"palmerpenguins\", 'ggthemes', 'ggplot2', 'dplyr', 'here', 'knitr')\n```\n:::\n\n\n\n## Load Packages, DON'T EDIT {#sec-packages -}\n\n### Install Missing {-}\n\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n```\n:::\n\n\n### Load {-}\n\nLoad all packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\nlapply(packages, require, character.only = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE\n\n[[6]]\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Introduction\n\nThis page introduces the plot creation vocabulary step by step\n\n\n## Plot Creation Process\n\n### Load Dataset\n\nThe `penguins` dataset from the `palmerpenguins` package will be used for plotting. Typically, the package is loaded using the `library` function as shown in the code chunk below. However, a better approach is the one outlined in @sec-packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\nExplore the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(penguins)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"r-help-page\"><div class=\"container\"><main>\n\n<table style=\"width: 100%;\"><tr><td>penguins</td><td style=\"text-align: right;\">R Documentation</td></tr></table>\n\n<h2>Size measurements for adult foraging penguins near Palmer Station, Antarctica</h2>\n\n<h3>Description</h3>\n\n<p>Includes measurements for penguin species, island in Palmer Archipelago,\nsize (flipper length, body mass, bill dimensions), and sex.\nThis is a subset of <code>penguins_raw</code>.\n</p>\n\n\n<h3>Usage</h3>\n\n<pre><code class='language-R'>penguins\n</code></pre>\n\n\n<h3>Format</h3>\n\n<p>A tibble with 344 rows and 8 variables:\n</p>\n\n<dl>\n<dt>species</dt><dd><p>a factor denoting penguin species (Adélie, Chinstrap and Gentoo)</p>\n</dd>\n<dt>island</dt><dd><p>a factor denoting island in Palmer Archipelago, Antarctica (Biscoe, Dream or Torgersen)</p>\n</dd>\n<dt>bill_length_mm</dt><dd><p>a number denoting bill length (millimeters)</p>\n</dd>\n<dt>bill_depth_mm</dt><dd><p>a number denoting bill depth (millimeters)</p>\n</dd>\n<dt>flipper_length_mm</dt><dd><p>an integer denoting flipper length (millimeters)</p>\n</dd>\n<dt>body_mass_g</dt><dd><p>an integer denoting body mass (grams)</p>\n</dd>\n<dt>sex</dt><dd><p>a factor denoting penguin sex (female, male)</p>\n</dd>\n<dt>year</dt><dd><p>an integer denoting the study year (2007, 2008, or 2009)</p>\n</dd>\n</dl>\n\n\n\n<h3>Source</h3>\n\n<p>Adélie penguins: Palmer Station Antarctica LTER and K. Gorman. 2020. Structural size measurements and isotopic signatures of foraging among adult male and female Adélie penguins (Pygoscelis adeliae) nesting along the Palmer Archipelago near Palmer Station, 2007-2009 ver 5. Environmental Data Initiative. doi: <a href=\"https://doi.org/10.6073/pasta/98b16d7d563f265cb52372c8ca99e60f\">10.6073/pasta/98b16d7d563f265cb52372c8ca99e60f</a>\n</p>\n<p>Gentoo penguins: Palmer Station Antarctica LTER and K. Gorman. 2020. Structural size measurements and isotopic signatures of foraging among adult male and female Gentoo penguin (Pygoscelis papua) nesting along the Palmer Archipelago near Palmer Station, 2007-2009 ver 5. Environmental Data Initiative. doi: <a href=\"https://doi.org/10.6073/pasta/7fca67fb28d56ee2ffa3d9370ebda689\">10.6073/pasta/7fca67fb28d56ee2ffa3d9370ebda689</a>\n</p>\n<p>Chinstrap penguins: Palmer Station Antarctica LTER and K. Gorman. 2020. Structural size measurements and isotopic signatures of foraging among adult male and female Chinstrap penguin (Pygoscelis antarcticus) nesting along the Palmer Archipelago near Palmer Station, 2007-2009 ver 6. Environmental Data Initiative. doi: <a href=\"https://doi.org/10.6073/pasta/c14dfcfada8ea13a17536e73eb6fbe9e\">10.6073/pasta/c14dfcfada8ea13a17536e73eb6fbe9e</a>\n</p>\n<p>Originally published in: Gorman KB, Williams TD, Fraser WR (2014) Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis). PLoS ONE 9(3): e90081. doi:10.1371/journal.pone.0090081\n</p>\n\n</main>\n\n</div>\n</div>\n```\n:::\n:::\n\n\nExplore the dataset differently\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n:::\n\n\n### Load Plotting Package\n\nThe `ggplot2` package will be used for plotting. The package is typically loaded using the `library` function as shown in the code chunk below. However, a better approach is the one outlined in @sec-packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n### Create `ggplot` object\n\nCreate an empty canvas by instantiating a `ggplot` object using the `ggplot()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Link Dataset\n\nLink the dataset with the instantiated `ggplot` object using the `data` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Map Two Variables\n\nSpecify which of the variables in the dataset will be used as the plot aesthetics (visual properties) using the `mapping` argument done via the `aes()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Display Data\n\nSpecify how the data (observations) will be represented geometrically on the plot, eg, bars, points, or line. The functions starting with `geom_` is used for this purpose. These functions add layer of the selected geometric object to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Map Third Variables\n\nOther variables in the dataset can be linked to plot aesthetics (visual properties) using the `mapping` argument done via the `aes()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Display Three Trendlines\n\nMore geometric representations for the data can be specified using the functions starting with `geom_` which will add layer of the selected geometric object to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Display One Trendline\n\nThe aesthetic mapping defined in the `ggplot()` function is *global* meaning that all the `geom_()` functions inherit it. However, the aesthetic mapping defined in the `geom_()` functions are *local*, ie, not shared with other `gemo_()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Map One Variable Twice\n\nWe can link the same variable to multiple plot aesthetics (visual properties) using the `mapping` parameter done via the `aes()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Fix Labels\n\nThe `labs()` function can be used to make the plot more accessible. The function will add new layer to the plot and the following items can be added to the layer using the corresponding parameters\n\n-   a title using the `title` parameter\n-   a sub-title, if necessary, using the `subtitle` parameter\n-   x-axis title using the `x` parameter\n-   y-axis title using the `y` parameter\n-   data-series label or legend using the `color` and/or `shape` parameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nOther types of texts can be added using other functions. The other types of texts are:\n\n-   x-axis label\n-   y-axis label\n-   data labels, if necessary\n-   annotation for interesting or important data, if exist\n\n### Ensure Color-blind Safe\n\nMake the plot more color-blind safe by using the `scale_color_colorblind()` function from the `ggthemes` package which will add new layer to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### Can Call Implicitly\n\nThe first one or two arguments of functions are so important that scientists should know them by heart. Hence, to save some typing, the name of these arguments are usually omitted and only the values assigned to them are kept, ie, the names becomes implicit and no more explicit. Hence, the above call can be written as follows--the arguments `data` and `mapping` were omitted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Use Pipe Operator\n\nThe pipe operator `\\>` (shortcut: `Ctrl+M`) can be used to make the code tidy. The above code can be re-written as follow--notice the dataset was pulled before the call to the `ggplot()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = 'Palmer Three Species Penguins',\n    subtitle = 'The flipper length has a moderattly strong positive linear relationship with the body mass',\n    x = 'Fliper length (mm)',\n    y = 'Body mass (g)',\n    shape = 'Species',\n    color = 'Species'\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-data-viz_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Visualizing Distribution\n\n### Categorical Variables\n\nPlot options to visualize how a categorical variable is distributed:\n\n-   bar chart, if the counts are not computed, using `gemo_bar()` function\n-   column chart, if the counts are computed, `gemo_col()` function\n\n### Numerical Variables\n\nPlot options to visualize how a numerical (discrete or continuous) variable is distributed:\n\n-   histogram, using `geom_histogram()` function\n\n::: callout-note\n#### Histogram Bin Width\n\nThe bin width of the histogram is in the unit of the variable mapped to the plot `x` (or `y`) aesthetic (visual property)\n:::\n\n-   density plot, using `geom_density()` function\n-   boxplot, using `geom_boplot()` function\n\n::: callout-note\n#### Boxplot Components\n\nAs described beautifully in [R4DS](https://r4ds.hadley.nz/data-visualize#visualizing-relationships), a boxplot consists of:\n\n1.  A box that describes the range of the middle half of the data, a distance known as the interquartile range (IQR), stretching from the 25th percentile of the distribution to the 75th percentile.\n\n2.  A line in the middle of the box displaying the median, ie, the 50th percentile, of the distribution.\n\n3.  The box and the line give sense of the spread of the distribution and whether or not the distribution is symmetric about the median or skewed to one side\n\n4.  Visual points that display the observations that fall more than 1.5 time the IQR from either edge of the box. These outlying points (hence called outliers) are unusual so are plotted individually\n\n5.  A whisker that extend from each end of the box and goes to the farthest non-outlier point in the distribution\n\nBelow is the diagram from [R4DS](https://r4ds.hadley.nz/data-visualize#visualizing-relationships) showing the above components and how the boxpot is created.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Boxplot Components (taken from [R4DS](https://r4ds.hadley.nz/data-visualize#visualizing-relationships))](../../images/EDA-boxplot.png){#fig-boxplot width=NuLL}\n:::\n:::\n\n\n:::\n\n## Visualizing Relationships\n\n### One Categorical + One Numerical\n\nFor each category of the categorical variable, We can use any of the plot options mentioned above for the numerical variables\n\n### Two Categoricals\n\nEach category of one of the categorical variables will be placed on the x-axis (or the y-axis) by mapping it to the plot `x` (or `y`) aesthetic (visual property) of the `geom_bar()` and the distribution of the categories of the other categorical variables by mapping it to the plot `fill` aesthetic (visual property). The second variable can be shown as:\n\n-   pure counts (stacked bar chart), or\n-   percentages (percent stack bar chart) by setting the `position` attribute of the `geom_bar()` to `fill`.\n\n### Two Numerical\n\nPlot options to show the relationship between two numerical variables are:\n\n-   Scatter plot using the `geom_point()` function\n-   trend line using `geom_smooth()` function\n-   line graph using `geom_line()` function if one of the variables is monotonic, eg, time or date.\n\n### Three or More Variables\n\nTo visualize 3+ variables, We can either\n\n-   map variables to other aesthetics of the plot, eg, *color*, *size*, and *shape*\n-   split plot into facets, subplots that each display one subset of the data, based on a categorical variable using `facet_wrap()` function where its first argument is a formula created using `~` followed by a (categorical) variable name.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}