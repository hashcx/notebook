{
  "hash": "b47080d179ffdb9af17f38f50537d2da",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow: Code Style\"\nnumber-sections: true\n---\n\n\n## Clear Workspace, DON'T EDIT {-}\n\nAlways start by clearing the workspace. This ensure objects created in other files are not used used here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n```\n:::\n\n\n## List Used Packages, EDIT {-}\n\nList all the packages that will be used in chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages <- c(\"styler\")\n```\n:::\n\n\n\n## Load Packages, DON'T EDIT {#sec-packages -}\n\n### Install Missing {-}\n\nAny missing package will be installed automatically. This ensure smoother execution when run by others.\n\n::: callout-important\n\n#### Installing Packages on Other People Machine\n\nBe aware the people may not like installing packages into their machine automatically.  This might break some of their previous code.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\ninstall.packages(setdiff(packages, rownames(installed.packages())))\n```\n:::\n\n\n### Load {-}\n\nLoad all packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do NOT modify\nlapply(packages, require, character.only = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Introduction\n\nThis page covers code style concepts when working with R. I took note for those that were new to me or found useful to remind myself with.\n\n::: callout-note\n### Code Style & Punctuation\n\nCode style is like punctuation, when used correctly, itmakecodereadeasily.\n:::\n\n\n## Styling Overview\n\n### Consistency\n\nAlthough there are styling guidelines (see below for example) that one can follow, it is important that a programmer pick one and stick with it to make easy for other including future self to read your work.\n\n### Guidelines\n\nThere is not official styling guideline for R. However, there are different styling guidelines that one can adopt, below are some of those found by search R styling guidelines ([html](https://www.google.com/search?q=r+styling+guidlines&oq=r+styling+guidlines)):\n\n-   tidyverse Style Guide ([html](https://style.tidyverse.org/)) by Hadley Wickham. **This is the adopted guidelines in these notes.**\n-   R Style Guide ([html](https://google.github.io/styleguide/Rguide.html)) by Google\n-   R Coding Conventions ([html](https://docs.google.com/document/d/1esDVxyWvH8AsX-VJa-8oqWaHLs4stGlIbk8kLc5VlII/preview)) by Henrik Bengtsson, Assoc Professor, Dept of Statistics, University of California, Berkeley\n-   Coding Style ([html](https://contributions.bioconductor.org/r-code.html#r-code)) by Bioconductor project ([website](https://bioconductor.org/))\n-   R Style Guide ([html](https://jef.works/R-style-guide/)) by Jean Fan ([GitHub](https://github.com/JEFworks)), Assistant Professor, Center for Computational Biology, Department of Biomedical Engineering, Johns Hopkins University\n\n### Automatic\n\nThere are package that can be used to automatically style existing code. Below are some of those:\n\n-   `styler` package ([website](https://styler.r-lib.org/)) by Lorenz Walthert ([website](https://lorenzwalthert.com/)). After installing the package, launch RStudio's command palette using the keyboard shortcut `Ctrl+Shift+P`, type `styler`, and select from the available commands\n\n## Styling Specifics\n\n### Names\n\n-   Use meaningful names\n-   snake_case is used to separate_multi_word_variables\n-   variables with certain theme should start with the same common word/letter to make use of the auto-complete functionality\n\n### Spaces\n\n-   Except `^`, put spaces on both sides of mathematical operators\n-   Put spaces on both sides of the assignment operator, `<-`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Strive for\nz <- (a + b)^2 / d\n\n# Avoid\nz<-( a + b ) ^ 2/d\n```\n:::\n\n\n-   Don't put spaces inside or outside parentheses for regular function calls\n-   Always put a space after a comma\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Strive for\nmean(x, na.rm = TRUE)\n\n# Avoid\nmean (x ,na.rm=TRUE)\n```\n:::\n\n\n-   It is okay to use extra space so align things.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(\n    speed      = distance / air_time,\n    dep_hour   = dep_time %/% 100,\n    dep_minute = dep_time %%  100\n  )\n```\n:::\n\n\n### Pipes `|>`\n\nThe roles for pipes are nicely summarized in [R4DS](https://r4ds.hadley.nz/workflow-style#sec-pipes). Most of them are copied below.\n\n-   Put a space before it\n-   It should typically the last thing on a line. This make it easy to\n    -   add new steps\n    -   rearrange existing steps\n    -   modify elements within a step\n    -   quickly skip the verbs on the left-hand side\n-   After the first step of the pipeline, indent each line by two spaces\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Strive for \nflights |>  \n  filter(!is.na(arr_delay), !is.na(tailnum)) |> \n  count(dest)\n\n# Avoid\nflights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)\n```\n:::\n\n\n-   If piping to a function without named arguments and its arguments fit on one line,\n    -   put all of them on one line.\n-   If piping to a function with named arguments OR the function has not named arguments but the arguments do not fit on line,\n    -   put each argument on new line indented by two spaces\n    -   make sure the `)` is on its own line and un-indented to match the horizontal position of the function name\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Strive for\nflights |>  \n  group_by(tailnum) |> \n  summarize(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  )\n\n# Avoid\nflights |>\n  group_by(\n    tailnum\n  ) |> \n  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())\n\n# Avoid\nflights|>\n  group_by(tailnum) |> \n  summarize(\n             delay = mean(arr_delay, na.rm = TRUE), \n             n = n()\n           )\n\n# Avoid\nflights|>\n  group_by(tailnum) |> \n  summarize(\n  delay = mean(arr_delay, na.rm = TRUE), \n  n = n()\n  )\n```\n:::\n\n\n::: callout-note\n#### Long Pipeline\n\nBreak long pipelines (tasks) to meaningful pipelines (sub-tasks) and save the intermediate steps. This will make the code more readable and easy to check and debug.\n:::\n\n### `ggplot2`\n\nThe same rules from pipe can be applied to `ggplot2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(dest) |> \n  summarize(\n    distance = mean(distance),\n    speed = mean(distance / air_time, na.rm = TRUE)\n  ) |> \n  ggplot(aes(x = distance, y = speed)) +\n  geom_smooth(\n    method = \"loess\",\n    span = 0.5,\n    se = FALSE, \n    color = \"white\", \n    linewidth = 4\n  ) +\n  geom_point()\n```\n:::\n\n\n### Sectioning Comments\n\nWhen writing long scripts, it is advisable to break the code into sections and using *sectioning* comments to label them. The RStudio keyboard shortcut to create such comment is `Cnrl+Shift+R`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data --------------------------------------\n\n# Plot data --------------------------------------\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}